"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createModelResponseFromJSON = exports.createModelResponseToJSON = exports.CreateModelResponse$ = exports.CreateModelResponse$outboundSchema = exports.CreateModelResponse$inboundSchema = exports.createModelResponseBodyFromJSON = exports.createModelResponseBodyToJSON = exports.CreateModelResponseBody$ = exports.CreateModelResponseBody$outboundSchema = exports.CreateModelResponseBody$inboundSchema = exports.createModelSDTrainingOutputFromJSON = exports.createModelSDTrainingOutputToJSON = exports.CreateModelSDTrainingOutput$ = exports.CreateModelSDTrainingOutput$outboundSchema = exports.CreateModelSDTrainingOutput$inboundSchema = exports.createModelRequestBodyFromJSON = exports.createModelRequestBodyToJSON = exports.CreateModelRequestBody$ = exports.CreateModelRequestBody$outboundSchema = exports.CreateModelRequestBody$inboundSchema = exports.CreateModelSdVersions$ = exports.CreateModelSdVersions$outboundSchema = exports.CreateModelSdVersions$inboundSchema = exports.CreateModelSdVersions = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/**
 * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5.
 */
var CreateModelSdVersions;
(function (CreateModelSdVersions) {
    CreateModelSdVersions["V15"] = "v1_5";
    CreateModelSdVersions["V2"] = "v2";
})(CreateModelSdVersions || (exports.CreateModelSdVersions = CreateModelSdVersions = {}));
/** @internal */
exports.CreateModelSdVersions$inboundSchema = z.nativeEnum(CreateModelSdVersions);
/** @internal */
exports.CreateModelSdVersions$outboundSchema = exports.CreateModelSdVersions$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateModelSdVersions$;
(function (CreateModelSdVersions$) {
    /** @deprecated use `CreateModelSdVersions$inboundSchema` instead. */
    CreateModelSdVersions$.inboundSchema = exports.CreateModelSdVersions$inboundSchema;
    /** @deprecated use `CreateModelSdVersions$outboundSchema` instead. */
    CreateModelSdVersions$.outboundSchema = exports.CreateModelSdVersions$outboundSchema;
})(CreateModelSdVersions$ || (exports.CreateModelSdVersions$ = CreateModelSdVersions$ = {}));
/** @internal */
exports.CreateModelRequestBody$inboundSchema = z.object({
    datasetId: z.string(),
    description: z.nullable(z.string().default("")),
    instance_prompt: z.string(),
    modelType: shared.CustomModelType$inboundSchema.default(shared.CustomModelType.General),
    name: z.string(),
    nsfw: z.nullable(z.boolean().default(false)),
    resolution: z.nullable(z.number().int().default(512)),
    sd_version: z.nullable(exports.CreateModelSdVersions$inboundSchema).optional(),
    strength: shared.Strength$inboundSchema.default(shared.Strength.Medium),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "instance_prompt": "instancePrompt",
        "sd_version": "sdVersion",
    });
});
/** @internal */
exports.CreateModelRequestBody$outboundSchema = z.object({
    datasetId: z.string(),
    description: z.nullable(z.string().default("")),
    instancePrompt: z.string(),
    modelType: shared.CustomModelType$outboundSchema.default(shared.CustomModelType.General),
    name: z.string(),
    nsfw: z.nullable(z.boolean().default(false)),
    resolution: z.nullable(z.number().int().default(512)),
    sdVersion: z.nullable(exports.CreateModelSdVersions$outboundSchema).optional(),
    strength: shared.Strength$outboundSchema.default(shared.Strength.Medium),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        instancePrompt: "instance_prompt",
        sdVersion: "sd_version",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateModelRequestBody$;
(function (CreateModelRequestBody$) {
    /** @deprecated use `CreateModelRequestBody$inboundSchema` instead. */
    CreateModelRequestBody$.inboundSchema = exports.CreateModelRequestBody$inboundSchema;
    /** @deprecated use `CreateModelRequestBody$outboundSchema` instead. */
    CreateModelRequestBody$.outboundSchema = exports.CreateModelRequestBody$outboundSchema;
})(CreateModelRequestBody$ || (exports.CreateModelRequestBody$ = CreateModelRequestBody$ = {}));
function createModelRequestBodyToJSON(createModelRequestBody) {
    return JSON.stringify(exports.CreateModelRequestBody$outboundSchema.parse(createModelRequestBody));
}
exports.createModelRequestBodyToJSON = createModelRequestBodyToJSON;
function createModelRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateModelRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateModelRequestBody' from JSON`);
}
exports.createModelRequestBodyFromJSON = createModelRequestBodyFromJSON;
/** @internal */
exports.CreateModelSDTrainingOutput$inboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    customModelId: z.string().optional(),
});
/** @internal */
exports.CreateModelSDTrainingOutput$outboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    customModelId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateModelSDTrainingOutput$;
(function (CreateModelSDTrainingOutput$) {
    /** @deprecated use `CreateModelSDTrainingOutput$inboundSchema` instead. */
    CreateModelSDTrainingOutput$.inboundSchema = exports.CreateModelSDTrainingOutput$inboundSchema;
    /** @deprecated use `CreateModelSDTrainingOutput$outboundSchema` instead. */
    CreateModelSDTrainingOutput$.outboundSchema = exports.CreateModelSDTrainingOutput$outboundSchema;
})(CreateModelSDTrainingOutput$ || (exports.CreateModelSDTrainingOutput$ = CreateModelSDTrainingOutput$ = {}));
function createModelSDTrainingOutputToJSON(createModelSDTrainingOutput) {
    return JSON.stringify(exports.CreateModelSDTrainingOutput$outboundSchema.parse(createModelSDTrainingOutput));
}
exports.createModelSDTrainingOutputToJSON = createModelSDTrainingOutputToJSON;
function createModelSDTrainingOutputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateModelSDTrainingOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateModelSDTrainingOutput' from JSON`);
}
exports.createModelSDTrainingOutputFromJSON = createModelSDTrainingOutputFromJSON;
/** @internal */
exports.CreateModelResponseBody$inboundSchema = z.object({
    sdTrainingJob: z.nullable(z.lazy(() => exports.CreateModelSDTrainingOutput$inboundSchema)).optional(),
});
/** @internal */
exports.CreateModelResponseBody$outboundSchema = z.object({
    sdTrainingJob: z.nullable(z.lazy(() => exports.CreateModelSDTrainingOutput$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateModelResponseBody$;
(function (CreateModelResponseBody$) {
    /** @deprecated use `CreateModelResponseBody$inboundSchema` instead. */
    CreateModelResponseBody$.inboundSchema = exports.CreateModelResponseBody$inboundSchema;
    /** @deprecated use `CreateModelResponseBody$outboundSchema` instead. */
    CreateModelResponseBody$.outboundSchema = exports.CreateModelResponseBody$outboundSchema;
})(CreateModelResponseBody$ || (exports.CreateModelResponseBody$ = CreateModelResponseBody$ = {}));
function createModelResponseBodyToJSON(createModelResponseBody) {
    return JSON.stringify(exports.CreateModelResponseBody$outboundSchema.parse(createModelResponseBody));
}
exports.createModelResponseBodyToJSON = createModelResponseBodyToJSON;
function createModelResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateModelResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateModelResponseBody' from JSON`);
}
exports.createModelResponseBodyFromJSON = createModelResponseBodyFromJSON;
/** @internal */
exports.CreateModelResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.CreateModelResponseBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.CreateModelResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.CreateModelResponseBody$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateModelResponse$;
(function (CreateModelResponse$) {
    /** @deprecated use `CreateModelResponse$inboundSchema` instead. */
    CreateModelResponse$.inboundSchema = exports.CreateModelResponse$inboundSchema;
    /** @deprecated use `CreateModelResponse$outboundSchema` instead. */
    CreateModelResponse$.outboundSchema = exports.CreateModelResponse$outboundSchema;
})(CreateModelResponse$ || (exports.CreateModelResponse$ = CreateModelResponse$ = {}));
function createModelResponseToJSON(createModelResponse) {
    return JSON.stringify(exports.CreateModelResponse$outboundSchema.parse(createModelResponse));
}
exports.createModelResponseToJSON = createModelResponseToJSON;
function createModelResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateModelResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateModelResponse' from JSON`);
}
exports.createModelResponseFromJSON = createModelResponseFromJSON;
//# sourceMappingURL=createmodel.js.map