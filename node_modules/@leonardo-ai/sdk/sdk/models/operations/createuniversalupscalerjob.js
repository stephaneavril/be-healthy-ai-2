"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUniversalUpscalerJobResponseFromJSON = exports.createUniversalUpscalerJobResponseToJSON = exports.CreateUniversalUpscalerJobResponse$ = exports.CreateUniversalUpscalerJobResponse$outboundSchema = exports.CreateUniversalUpscalerJobResponse$inboundSchema = exports.createUniversalUpscalerJobResponseBodyFromJSON = exports.createUniversalUpscalerJobResponseBodyToJSON = exports.CreateUniversalUpscalerJobResponseBody$ = exports.CreateUniversalUpscalerJobResponseBody$outboundSchema = exports.CreateUniversalUpscalerJobResponseBody$inboundSchema = exports.universalUpscalerOutputFromJSON = exports.universalUpscalerOutputToJSON = exports.UniversalUpscalerOutput$ = exports.UniversalUpscalerOutput$outboundSchema = exports.UniversalUpscalerOutput$inboundSchema = exports.createUniversalUpscalerJobRequestBodyFromJSON = exports.createUniversalUpscalerJobRequestBodyToJSON = exports.CreateUniversalUpscalerJobRequestBody$ = exports.CreateUniversalUpscalerJobRequestBody$outboundSchema = exports.CreateUniversalUpscalerJobRequestBody$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/** @internal */
exports.CreateUniversalUpscalerJobRequestBody$inboundSchema = z.object({
    creativityStrength: z.nullable(z.number().int().default(5)),
    detailContrast: z.nullable(z.number().int()).optional(),
    generatedImageId: z.nullable(z.string()).optional(),
    initImageId: z.nullable(z.string()).optional(),
    prompt: z.nullable(z.string()).optional(),
    similarity: z.nullable(z.number().int()).optional(),
    ultraUpscaleStyle: z.nullable(shared.UniversalUpscalerUltraStyle$inboundSchema).optional(),
    upscaleMultiplier: z.nullable(z.number().default(1.5)),
    upscalerStyle: z.nullable(shared.UniversalUpscalerStyle$inboundSchema.default(shared.UniversalUpscalerStyle.General)),
    variationId: z.nullable(z.string()).optional(),
});
/** @internal */
exports.CreateUniversalUpscalerJobRequestBody$outboundSchema = z.object({
    creativityStrength: z.nullable(z.number().int().default(5)),
    detailContrast: z.nullable(z.number().int()).optional(),
    generatedImageId: z.nullable(z.string()).optional(),
    initImageId: z.nullable(z.string()).optional(),
    prompt: z.nullable(z.string()).optional(),
    similarity: z.nullable(z.number().int()).optional(),
    ultraUpscaleStyle: z.nullable(shared.UniversalUpscalerUltraStyle$outboundSchema).optional(),
    upscaleMultiplier: z.nullable(z.number().default(1.5)),
    upscalerStyle: z.nullable(shared.UniversalUpscalerStyle$outboundSchema.default(shared.UniversalUpscalerStyle.General)),
    variationId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateUniversalUpscalerJobRequestBody$;
(function (CreateUniversalUpscalerJobRequestBody$) {
    /** @deprecated use `CreateUniversalUpscalerJobRequestBody$inboundSchema` instead. */
    CreateUniversalUpscalerJobRequestBody$.inboundSchema = exports.CreateUniversalUpscalerJobRequestBody$inboundSchema;
    /** @deprecated use `CreateUniversalUpscalerJobRequestBody$outboundSchema` instead. */
    CreateUniversalUpscalerJobRequestBody$.outboundSchema = exports.CreateUniversalUpscalerJobRequestBody$outboundSchema;
})(CreateUniversalUpscalerJobRequestBody$ || (exports.CreateUniversalUpscalerJobRequestBody$ = CreateUniversalUpscalerJobRequestBody$ = {}));
function createUniversalUpscalerJobRequestBodyToJSON(createUniversalUpscalerJobRequestBody) {
    return JSON.stringify(exports.CreateUniversalUpscalerJobRequestBody$outboundSchema.parse(createUniversalUpscalerJobRequestBody));
}
exports.createUniversalUpscalerJobRequestBodyToJSON = createUniversalUpscalerJobRequestBodyToJSON;
function createUniversalUpscalerJobRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateUniversalUpscalerJobRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateUniversalUpscalerJobRequestBody' from JSON`);
}
exports.createUniversalUpscalerJobRequestBodyFromJSON = createUniversalUpscalerJobRequestBodyFromJSON;
/** @internal */
exports.UniversalUpscalerOutput$inboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    id: z.nullable(z.string()).optional(),
});
/** @internal */
exports.UniversalUpscalerOutput$outboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    id: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UniversalUpscalerOutput$;
(function (UniversalUpscalerOutput$) {
    /** @deprecated use `UniversalUpscalerOutput$inboundSchema` instead. */
    UniversalUpscalerOutput$.inboundSchema = exports.UniversalUpscalerOutput$inboundSchema;
    /** @deprecated use `UniversalUpscalerOutput$outboundSchema` instead. */
    UniversalUpscalerOutput$.outboundSchema = exports.UniversalUpscalerOutput$outboundSchema;
})(UniversalUpscalerOutput$ || (exports.UniversalUpscalerOutput$ = UniversalUpscalerOutput$ = {}));
function universalUpscalerOutputToJSON(universalUpscalerOutput) {
    return JSON.stringify(exports.UniversalUpscalerOutput$outboundSchema.parse(universalUpscalerOutput));
}
exports.universalUpscalerOutputToJSON = universalUpscalerOutputToJSON;
function universalUpscalerOutputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UniversalUpscalerOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UniversalUpscalerOutput' from JSON`);
}
exports.universalUpscalerOutputFromJSON = universalUpscalerOutputFromJSON;
/** @internal */
exports.CreateUniversalUpscalerJobResponseBody$inboundSchema = z.object({
    universalUpscaler: z.lazy(() => exports.UniversalUpscalerOutput$inboundSchema)
        .optional(),
});
/** @internal */
exports.CreateUniversalUpscalerJobResponseBody$outboundSchema = z.object({
    universalUpscaler: z.lazy(() => exports.UniversalUpscalerOutput$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateUniversalUpscalerJobResponseBody$;
(function (CreateUniversalUpscalerJobResponseBody$) {
    /** @deprecated use `CreateUniversalUpscalerJobResponseBody$inboundSchema` instead. */
    CreateUniversalUpscalerJobResponseBody$.inboundSchema = exports.CreateUniversalUpscalerJobResponseBody$inboundSchema;
    /** @deprecated use `CreateUniversalUpscalerJobResponseBody$outboundSchema` instead. */
    CreateUniversalUpscalerJobResponseBody$.outboundSchema = exports.CreateUniversalUpscalerJobResponseBody$outboundSchema;
})(CreateUniversalUpscalerJobResponseBody$ || (exports.CreateUniversalUpscalerJobResponseBody$ = CreateUniversalUpscalerJobResponseBody$ = {}));
function createUniversalUpscalerJobResponseBodyToJSON(createUniversalUpscalerJobResponseBody) {
    return JSON.stringify(exports.CreateUniversalUpscalerJobResponseBody$outboundSchema.parse(createUniversalUpscalerJobResponseBody));
}
exports.createUniversalUpscalerJobResponseBodyToJSON = createUniversalUpscalerJobResponseBodyToJSON;
function createUniversalUpscalerJobResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateUniversalUpscalerJobResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateUniversalUpscalerJobResponseBody' from JSON`);
}
exports.createUniversalUpscalerJobResponseBodyFromJSON = createUniversalUpscalerJobResponseBodyFromJSON;
/** @internal */
exports.CreateUniversalUpscalerJobResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.CreateUniversalUpscalerJobResponseBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.CreateUniversalUpscalerJobResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.CreateUniversalUpscalerJobResponseBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateUniversalUpscalerJobResponse$;
(function (CreateUniversalUpscalerJobResponse$) {
    /** @deprecated use `CreateUniversalUpscalerJobResponse$inboundSchema` instead. */
    CreateUniversalUpscalerJobResponse$.inboundSchema = exports.CreateUniversalUpscalerJobResponse$inboundSchema;
    /** @deprecated use `CreateUniversalUpscalerJobResponse$outboundSchema` instead. */
    CreateUniversalUpscalerJobResponse$.outboundSchema = exports.CreateUniversalUpscalerJobResponse$outboundSchema;
})(CreateUniversalUpscalerJobResponse$ || (exports.CreateUniversalUpscalerJobResponse$ = CreateUniversalUpscalerJobResponse$ = {}));
function createUniversalUpscalerJobResponseToJSON(createUniversalUpscalerJobResponse) {
    return JSON.stringify(exports.CreateUniversalUpscalerJobResponse$outboundSchema.parse(createUniversalUpscalerJobResponse));
}
exports.createUniversalUpscalerJobResponseToJSON = createUniversalUpscalerJobResponseToJSON;
function createUniversalUpscalerJobResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateUniversalUpscalerJobResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateUniversalUpscalerJobResponse' from JSON`);
}
exports.createUniversalUpscalerJobResponseFromJSON = createUniversalUpscalerJobResponseFromJSON;
//# sourceMappingURL=createuniversalupscalerjob.js.map