import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type DeleteElementByIdRequest = {
    /**
     * The ID of the element to delete.
     */
    id: number;
};
/**
 * columns and relationships of "user_loras".
 */
export type UserLoras = {
    id?: number | undefined;
};
/**
 * Responses for DELETE /models/{id}
 */
export type DeleteElementByIdResponseBody = {
    /**
     * columns and relationships of "user_loras".
     */
    deleteUserLorasByPk?: UserLoras | null | undefined;
};
export type DeleteElementByIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for DELETE /models/{id}
     */
    object?: DeleteElementByIdResponseBody | undefined;
};
/** @internal */
export declare const DeleteElementByIdRequest$inboundSchema: z.ZodType<DeleteElementByIdRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type DeleteElementByIdRequest$Outbound = {
    id: number;
};
/** @internal */
export declare const DeleteElementByIdRequest$outboundSchema: z.ZodType<DeleteElementByIdRequest$Outbound, z.ZodTypeDef, DeleteElementByIdRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteElementByIdRequest$ {
    /** @deprecated use `DeleteElementByIdRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteElementByIdRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteElementByIdRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteElementByIdRequest$Outbound, z.ZodTypeDef, DeleteElementByIdRequest>;
    /** @deprecated use `DeleteElementByIdRequest$Outbound` instead. */
    type Outbound = DeleteElementByIdRequest$Outbound;
}
export declare function deleteElementByIdRequestToJSON(deleteElementByIdRequest: DeleteElementByIdRequest): string;
export declare function deleteElementByIdRequestFromJSON(jsonString: string): SafeParseResult<DeleteElementByIdRequest, SDKValidationError>;
/** @internal */
export declare const UserLoras$inboundSchema: z.ZodType<UserLoras, z.ZodTypeDef, unknown>;
/** @internal */
export type UserLoras$Outbound = {
    id?: number | undefined;
};
/** @internal */
export declare const UserLoras$outboundSchema: z.ZodType<UserLoras$Outbound, z.ZodTypeDef, UserLoras>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserLoras$ {
    /** @deprecated use `UserLoras$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserLoras, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserLoras$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserLoras$Outbound, z.ZodTypeDef, UserLoras>;
    /** @deprecated use `UserLoras$Outbound` instead. */
    type Outbound = UserLoras$Outbound;
}
export declare function userLorasToJSON(userLoras: UserLoras): string;
export declare function userLorasFromJSON(jsonString: string): SafeParseResult<UserLoras, SDKValidationError>;
/** @internal */
export declare const DeleteElementByIdResponseBody$inboundSchema: z.ZodType<DeleteElementByIdResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type DeleteElementByIdResponseBody$Outbound = {
    delete_user_loras_by_pk?: UserLoras$Outbound | null | undefined;
};
/** @internal */
export declare const DeleteElementByIdResponseBody$outboundSchema: z.ZodType<DeleteElementByIdResponseBody$Outbound, z.ZodTypeDef, DeleteElementByIdResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteElementByIdResponseBody$ {
    /** @deprecated use `DeleteElementByIdResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteElementByIdResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteElementByIdResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteElementByIdResponseBody$Outbound, z.ZodTypeDef, DeleteElementByIdResponseBody>;
    /** @deprecated use `DeleteElementByIdResponseBody$Outbound` instead. */
    type Outbound = DeleteElementByIdResponseBody$Outbound;
}
export declare function deleteElementByIdResponseBodyToJSON(deleteElementByIdResponseBody: DeleteElementByIdResponseBody): string;
export declare function deleteElementByIdResponseBodyFromJSON(jsonString: string): SafeParseResult<DeleteElementByIdResponseBody, SDKValidationError>;
/** @internal */
export declare const DeleteElementByIdResponse$inboundSchema: z.ZodType<DeleteElementByIdResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type DeleteElementByIdResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    object?: DeleteElementByIdResponseBody$Outbound | undefined;
};
/** @internal */
export declare const DeleteElementByIdResponse$outboundSchema: z.ZodType<DeleteElementByIdResponse$Outbound, z.ZodTypeDef, DeleteElementByIdResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteElementByIdResponse$ {
    /** @deprecated use `DeleteElementByIdResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteElementByIdResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteElementByIdResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteElementByIdResponse$Outbound, z.ZodTypeDef, DeleteElementByIdResponse>;
    /** @deprecated use `DeleteElementByIdResponse$Outbound` instead. */
    type Outbound = DeleteElementByIdResponse$Outbound;
}
export declare function deleteElementByIdResponseToJSON(deleteElementByIdResponse: DeleteElementByIdResponse): string;
export declare function deleteElementByIdResponseFromJSON(jsonString: string): SafeParseResult<DeleteElementByIdResponse, SDKValidationError>;
//# sourceMappingURL=deleteelementbyid.d.ts.map