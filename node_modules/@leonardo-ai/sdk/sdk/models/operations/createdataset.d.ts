import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Query parameters to be provided in the request body as a JSON object
 */
export type CreateDatasetRequestBody = {
    /**
     * A description for the dataset.
     */
    description?: string | null | undefined;
    /**
     * The name of the dataset.
     */
    name: string;
};
/**
 * columns and relationships of "datasets"
 */
export type Datasets = {
    id?: string | null | undefined;
};
/**
 * Responses for POST /datasets
 */
export type CreateDatasetResponseBody = {
    /**
     * columns and relationships of "datasets"
     */
    insertDatasetsOne?: Datasets | null | undefined;
};
export type CreateDatasetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /datasets
     */
    object?: CreateDatasetResponseBody | undefined;
};
/** @internal */
export declare const CreateDatasetRequestBody$inboundSchema: z.ZodType<CreateDatasetRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDatasetRequestBody$Outbound = {
    description?: string | null | undefined;
    name: string;
};
/** @internal */
export declare const CreateDatasetRequestBody$outboundSchema: z.ZodType<CreateDatasetRequestBody$Outbound, z.ZodTypeDef, CreateDatasetRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDatasetRequestBody$ {
    /** @deprecated use `CreateDatasetRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDatasetRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDatasetRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDatasetRequestBody$Outbound, z.ZodTypeDef, CreateDatasetRequestBody>;
    /** @deprecated use `CreateDatasetRequestBody$Outbound` instead. */
    type Outbound = CreateDatasetRequestBody$Outbound;
}
export declare function createDatasetRequestBodyToJSON(createDatasetRequestBody: CreateDatasetRequestBody): string;
export declare function createDatasetRequestBodyFromJSON(jsonString: string): SafeParseResult<CreateDatasetRequestBody, SDKValidationError>;
/** @internal */
export declare const Datasets$inboundSchema: z.ZodType<Datasets, z.ZodTypeDef, unknown>;
/** @internal */
export type Datasets$Outbound = {
    id?: string | null | undefined;
};
/** @internal */
export declare const Datasets$outboundSchema: z.ZodType<Datasets$Outbound, z.ZodTypeDef, Datasets>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Datasets$ {
    /** @deprecated use `Datasets$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Datasets, z.ZodTypeDef, unknown>;
    /** @deprecated use `Datasets$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Datasets$Outbound, z.ZodTypeDef, Datasets>;
    /** @deprecated use `Datasets$Outbound` instead. */
    type Outbound = Datasets$Outbound;
}
export declare function datasetsToJSON(datasets: Datasets): string;
export declare function datasetsFromJSON(jsonString: string): SafeParseResult<Datasets, SDKValidationError>;
/** @internal */
export declare const CreateDatasetResponseBody$inboundSchema: z.ZodType<CreateDatasetResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDatasetResponseBody$Outbound = {
    insert_datasets_one?: Datasets$Outbound | null | undefined;
};
/** @internal */
export declare const CreateDatasetResponseBody$outboundSchema: z.ZodType<CreateDatasetResponseBody$Outbound, z.ZodTypeDef, CreateDatasetResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDatasetResponseBody$ {
    /** @deprecated use `CreateDatasetResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDatasetResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDatasetResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDatasetResponseBody$Outbound, z.ZodTypeDef, CreateDatasetResponseBody>;
    /** @deprecated use `CreateDatasetResponseBody$Outbound` instead. */
    type Outbound = CreateDatasetResponseBody$Outbound;
}
export declare function createDatasetResponseBodyToJSON(createDatasetResponseBody: CreateDatasetResponseBody): string;
export declare function createDatasetResponseBodyFromJSON(jsonString: string): SafeParseResult<CreateDatasetResponseBody, SDKValidationError>;
/** @internal */
export declare const CreateDatasetResponse$inboundSchema: z.ZodType<CreateDatasetResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDatasetResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    object?: CreateDatasetResponseBody$Outbound | undefined;
};
/** @internal */
export declare const CreateDatasetResponse$outboundSchema: z.ZodType<CreateDatasetResponse$Outbound, z.ZodTypeDef, CreateDatasetResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDatasetResponse$ {
    /** @deprecated use `CreateDatasetResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDatasetResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDatasetResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDatasetResponse$Outbound, z.ZodTypeDef, CreateDatasetResponse>;
    /** @deprecated use `CreateDatasetResponse$Outbound` instead. */
    type Outbound = CreateDatasetResponse$Outbound;
}
export declare function createDatasetResponseToJSON(createDatasetResponse: CreateDatasetResponse): string;
export declare function createDatasetResponseFromJSON(jsonString: string): SafeParseResult<CreateDatasetResponse, SDKValidationError>;
//# sourceMappingURL=createdataset.d.ts.map