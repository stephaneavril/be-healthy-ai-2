"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDatasetByIdResponseFromJSON = exports.getDatasetByIdResponseToJSON = exports.GetDatasetByIdResponse$ = exports.GetDatasetByIdResponse$outboundSchema = exports.GetDatasetByIdResponse$inboundSchema = exports.getDatasetByIdResponseBodyFromJSON = exports.getDatasetByIdResponseBodyToJSON = exports.GetDatasetByIdResponseBody$ = exports.GetDatasetByIdResponseBody$outboundSchema = exports.GetDatasetByIdResponseBody$inboundSchema = exports.getDatasetByIdDatasetsFromJSON = exports.getDatasetByIdDatasetsToJSON = exports.GetDatasetByIdDatasets$ = exports.GetDatasetByIdDatasets$outboundSchema = exports.GetDatasetByIdDatasets$inboundSchema = exports.datasetImagesFromJSON = exports.datasetImagesToJSON = exports.DatasetImages$ = exports.DatasetImages$outboundSchema = exports.DatasetImages$inboundSchema = exports.getDatasetByIdRequestFromJSON = exports.getDatasetByIdRequestToJSON = exports.GetDatasetByIdRequest$ = exports.GetDatasetByIdRequest$outboundSchema = exports.GetDatasetByIdRequest$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.GetDatasetByIdRequest$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
exports.GetDatasetByIdRequest$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetDatasetByIdRequest$;
(function (GetDatasetByIdRequest$) {
    /** @deprecated use `GetDatasetByIdRequest$inboundSchema` instead. */
    GetDatasetByIdRequest$.inboundSchema = exports.GetDatasetByIdRequest$inboundSchema;
    /** @deprecated use `GetDatasetByIdRequest$outboundSchema` instead. */
    GetDatasetByIdRequest$.outboundSchema = exports.GetDatasetByIdRequest$outboundSchema;
})(GetDatasetByIdRequest$ || (exports.GetDatasetByIdRequest$ = GetDatasetByIdRequest$ = {}));
function getDatasetByIdRequestToJSON(getDatasetByIdRequest) {
    return JSON.stringify(exports.GetDatasetByIdRequest$outboundSchema.parse(getDatasetByIdRequest));
}
exports.getDatasetByIdRequestToJSON = getDatasetByIdRequestToJSON;
function getDatasetByIdRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetDatasetByIdRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDatasetByIdRequest' from JSON`);
}
exports.getDatasetByIdRequestFromJSON = getDatasetByIdRequestFromJSON;
/** @internal */
exports.DatasetImages$inboundSchema = z.object({
    createdAt: z.string().optional(),
    id: z.nullable(z.string()).optional(),
    url: z.string().optional(),
});
/** @internal */
exports.DatasetImages$outboundSchema = z.object({
    createdAt: z.string().optional(),
    id: z.nullable(z.string()).optional(),
    url: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DatasetImages$;
(function (DatasetImages$) {
    /** @deprecated use `DatasetImages$inboundSchema` instead. */
    DatasetImages$.inboundSchema = exports.DatasetImages$inboundSchema;
    /** @deprecated use `DatasetImages$outboundSchema` instead. */
    DatasetImages$.outboundSchema = exports.DatasetImages$outboundSchema;
})(DatasetImages$ || (exports.DatasetImages$ = DatasetImages$ = {}));
function datasetImagesToJSON(datasetImages) {
    return JSON.stringify(exports.DatasetImages$outboundSchema.parse(datasetImages));
}
exports.datasetImagesToJSON = datasetImagesToJSON;
function datasetImagesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DatasetImages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DatasetImages' from JSON`);
}
exports.datasetImagesFromJSON = datasetImagesFromJSON;
/** @internal */
exports.GetDatasetByIdDatasets$inboundSchema = z.object({
    createdAt: z.string().optional(),
    dataset_images: z.array(z.lazy(() => exports.DatasetImages$inboundSchema)).optional(),
    description: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    name: z.string().optional(),
    updatedAt: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "dataset_images": "datasetImages",
    });
});
/** @internal */
exports.GetDatasetByIdDatasets$outboundSchema = z.object({
    createdAt: z.string().optional(),
    datasetImages: z.array(z.lazy(() => exports.DatasetImages$outboundSchema)).optional(),
    description: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    name: z.string().optional(),
    updatedAt: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        datasetImages: "dataset_images",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetDatasetByIdDatasets$;
(function (GetDatasetByIdDatasets$) {
    /** @deprecated use `GetDatasetByIdDatasets$inboundSchema` instead. */
    GetDatasetByIdDatasets$.inboundSchema = exports.GetDatasetByIdDatasets$inboundSchema;
    /** @deprecated use `GetDatasetByIdDatasets$outboundSchema` instead. */
    GetDatasetByIdDatasets$.outboundSchema = exports.GetDatasetByIdDatasets$outboundSchema;
})(GetDatasetByIdDatasets$ || (exports.GetDatasetByIdDatasets$ = GetDatasetByIdDatasets$ = {}));
function getDatasetByIdDatasetsToJSON(getDatasetByIdDatasets) {
    return JSON.stringify(exports.GetDatasetByIdDatasets$outboundSchema.parse(getDatasetByIdDatasets));
}
exports.getDatasetByIdDatasetsToJSON = getDatasetByIdDatasetsToJSON;
function getDatasetByIdDatasetsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetDatasetByIdDatasets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDatasetByIdDatasets' from JSON`);
}
exports.getDatasetByIdDatasetsFromJSON = getDatasetByIdDatasetsFromJSON;
/** @internal */
exports.GetDatasetByIdResponseBody$inboundSchema = z.object({
    datasets_by_pk: z.nullable(z.lazy(() => exports.GetDatasetByIdDatasets$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "datasets_by_pk": "datasetsByPk",
    });
});
/** @internal */
exports.GetDatasetByIdResponseBody$outboundSchema = z.object({
    datasetsByPk: z.nullable(z.lazy(() => exports.GetDatasetByIdDatasets$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        datasetsByPk: "datasets_by_pk",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetDatasetByIdResponseBody$;
(function (GetDatasetByIdResponseBody$) {
    /** @deprecated use `GetDatasetByIdResponseBody$inboundSchema` instead. */
    GetDatasetByIdResponseBody$.inboundSchema = exports.GetDatasetByIdResponseBody$inboundSchema;
    /** @deprecated use `GetDatasetByIdResponseBody$outboundSchema` instead. */
    GetDatasetByIdResponseBody$.outboundSchema = exports.GetDatasetByIdResponseBody$outboundSchema;
})(GetDatasetByIdResponseBody$ || (exports.GetDatasetByIdResponseBody$ = GetDatasetByIdResponseBody$ = {}));
function getDatasetByIdResponseBodyToJSON(getDatasetByIdResponseBody) {
    return JSON.stringify(exports.GetDatasetByIdResponseBody$outboundSchema.parse(getDatasetByIdResponseBody));
}
exports.getDatasetByIdResponseBodyToJSON = getDatasetByIdResponseBodyToJSON;
function getDatasetByIdResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetDatasetByIdResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDatasetByIdResponseBody' from JSON`);
}
exports.getDatasetByIdResponseBodyFromJSON = getDatasetByIdResponseBodyFromJSON;
/** @internal */
exports.GetDatasetByIdResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.GetDatasetByIdResponseBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.GetDatasetByIdResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.GetDatasetByIdResponseBody$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetDatasetByIdResponse$;
(function (GetDatasetByIdResponse$) {
    /** @deprecated use `GetDatasetByIdResponse$inboundSchema` instead. */
    GetDatasetByIdResponse$.inboundSchema = exports.GetDatasetByIdResponse$inboundSchema;
    /** @deprecated use `GetDatasetByIdResponse$outboundSchema` instead. */
    GetDatasetByIdResponse$.outboundSchema = exports.GetDatasetByIdResponse$outboundSchema;
})(GetDatasetByIdResponse$ || (exports.GetDatasetByIdResponse$ = GetDatasetByIdResponse$ = {}));
function getDatasetByIdResponseToJSON(getDatasetByIdResponse) {
    return JSON.stringify(exports.GetDatasetByIdResponse$outboundSchema.parse(getDatasetByIdResponse));
}
exports.getDatasetByIdResponseToJSON = getDatasetByIdResponseToJSON;
function getDatasetByIdResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetDatasetByIdResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDatasetByIdResponse' from JSON`);
}
exports.getDatasetByIdResponseFromJSON = getDatasetByIdResponseFromJSON;
//# sourceMappingURL=getdatasetbyid.js.map