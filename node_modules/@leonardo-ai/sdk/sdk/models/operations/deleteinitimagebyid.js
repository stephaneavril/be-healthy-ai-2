"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteInitImageByIdResponseFromJSON = exports.deleteInitImageByIdResponseToJSON = exports.DeleteInitImageByIdResponse$ = exports.DeleteInitImageByIdResponse$outboundSchema = exports.DeleteInitImageByIdResponse$inboundSchema = exports.deleteInitImageByIdResponseBodyFromJSON = exports.deleteInitImageByIdResponseBodyToJSON = exports.DeleteInitImageByIdResponseBody$ = exports.DeleteInitImageByIdResponseBody$outboundSchema = exports.DeleteInitImageByIdResponseBody$inboundSchema = exports.initImagesFromJSON = exports.initImagesToJSON = exports.InitImages$ = exports.InitImages$outboundSchema = exports.InitImages$inboundSchema = exports.deleteInitImageByIdRequestFromJSON = exports.deleteInitImageByIdRequestToJSON = exports.DeleteInitImageByIdRequest$ = exports.DeleteInitImageByIdRequest$outboundSchema = exports.DeleteInitImageByIdRequest$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.DeleteInitImageByIdRequest$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
exports.DeleteInitImageByIdRequest$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DeleteInitImageByIdRequest$;
(function (DeleteInitImageByIdRequest$) {
    /** @deprecated use `DeleteInitImageByIdRequest$inboundSchema` instead. */
    DeleteInitImageByIdRequest$.inboundSchema = exports.DeleteInitImageByIdRequest$inboundSchema;
    /** @deprecated use `DeleteInitImageByIdRequest$outboundSchema` instead. */
    DeleteInitImageByIdRequest$.outboundSchema = exports.DeleteInitImageByIdRequest$outboundSchema;
})(DeleteInitImageByIdRequest$ || (exports.DeleteInitImageByIdRequest$ = DeleteInitImageByIdRequest$ = {}));
function deleteInitImageByIdRequestToJSON(deleteInitImageByIdRequest) {
    return JSON.stringify(exports.DeleteInitImageByIdRequest$outboundSchema.parse(deleteInitImageByIdRequest));
}
exports.deleteInitImageByIdRequestToJSON = deleteInitImageByIdRequestToJSON;
function deleteInitImageByIdRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteInitImageByIdRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteInitImageByIdRequest' from JSON`);
}
exports.deleteInitImageByIdRequestFromJSON = deleteInitImageByIdRequestFromJSON;
/** @internal */
exports.InitImages$inboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/** @internal */
exports.InitImages$outboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InitImages$;
(function (InitImages$) {
    /** @deprecated use `InitImages$inboundSchema` instead. */
    InitImages$.inboundSchema = exports.InitImages$inboundSchema;
    /** @deprecated use `InitImages$outboundSchema` instead. */
    InitImages$.outboundSchema = exports.InitImages$outboundSchema;
})(InitImages$ || (exports.InitImages$ = InitImages$ = {}));
function initImagesToJSON(initImages) {
    return JSON.stringify(exports.InitImages$outboundSchema.parse(initImages));
}
exports.initImagesToJSON = initImagesToJSON;
function initImagesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.InitImages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InitImages' from JSON`);
}
exports.initImagesFromJSON = initImagesFromJSON;
/** @internal */
exports.DeleteInitImageByIdResponseBody$inboundSchema = z.object({
    delete_init_images_by_pk: z.nullable(z.lazy(() => exports.InitImages$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "delete_init_images_by_pk": "deleteInitImagesByPk",
    });
});
/** @internal */
exports.DeleteInitImageByIdResponseBody$outboundSchema = z.object({
    deleteInitImagesByPk: z.nullable(z.lazy(() => exports.InitImages$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        deleteInitImagesByPk: "delete_init_images_by_pk",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DeleteInitImageByIdResponseBody$;
(function (DeleteInitImageByIdResponseBody$) {
    /** @deprecated use `DeleteInitImageByIdResponseBody$inboundSchema` instead. */
    DeleteInitImageByIdResponseBody$.inboundSchema = exports.DeleteInitImageByIdResponseBody$inboundSchema;
    /** @deprecated use `DeleteInitImageByIdResponseBody$outboundSchema` instead. */
    DeleteInitImageByIdResponseBody$.outboundSchema = exports.DeleteInitImageByIdResponseBody$outboundSchema;
})(DeleteInitImageByIdResponseBody$ || (exports.DeleteInitImageByIdResponseBody$ = DeleteInitImageByIdResponseBody$ = {}));
function deleteInitImageByIdResponseBodyToJSON(deleteInitImageByIdResponseBody) {
    return JSON.stringify(exports.DeleteInitImageByIdResponseBody$outboundSchema.parse(deleteInitImageByIdResponseBody));
}
exports.deleteInitImageByIdResponseBodyToJSON = deleteInitImageByIdResponseBodyToJSON;
function deleteInitImageByIdResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteInitImageByIdResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteInitImageByIdResponseBody' from JSON`);
}
exports.deleteInitImageByIdResponseBodyFromJSON = deleteInitImageByIdResponseBodyFromJSON;
/** @internal */
exports.DeleteInitImageByIdResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.DeleteInitImageByIdResponseBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.DeleteInitImageByIdResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.DeleteInitImageByIdResponseBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DeleteInitImageByIdResponse$;
(function (DeleteInitImageByIdResponse$) {
    /** @deprecated use `DeleteInitImageByIdResponse$inboundSchema` instead. */
    DeleteInitImageByIdResponse$.inboundSchema = exports.DeleteInitImageByIdResponse$inboundSchema;
    /** @deprecated use `DeleteInitImageByIdResponse$outboundSchema` instead. */
    DeleteInitImageByIdResponse$.outboundSchema = exports.DeleteInitImageByIdResponse$outboundSchema;
})(DeleteInitImageByIdResponse$ || (exports.DeleteInitImageByIdResponse$ = DeleteInitImageByIdResponse$ = {}));
function deleteInitImageByIdResponseToJSON(deleteInitImageByIdResponse) {
    return JSON.stringify(exports.DeleteInitImageByIdResponse$outboundSchema.parse(deleteInitImageByIdResponse));
}
exports.deleteInitImageByIdResponseToJSON = deleteInitImageByIdResponseToJSON;
function deleteInitImageByIdResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteInitImageByIdResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteInitImageByIdResponse' from JSON`);
}
exports.deleteInitImageByIdResponseFromJSON = deleteInitImageByIdResponseFromJSON;
//# sourceMappingURL=deleteinitimagebyid.js.map