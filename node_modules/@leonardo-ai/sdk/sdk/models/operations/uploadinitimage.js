"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadInitImageResponseFromJSON = exports.uploadInitImageResponseToJSON = exports.UploadInitImageResponse$ = exports.UploadInitImageResponse$outboundSchema = exports.UploadInitImageResponse$inboundSchema = exports.uploadInitImageResponseBodyFromJSON = exports.uploadInitImageResponseBodyToJSON = exports.UploadInitImageResponseBody$ = exports.UploadInitImageResponseBody$outboundSchema = exports.UploadInitImageResponseBody$inboundSchema = exports.initImageUploadOutputFromJSON = exports.initImageUploadOutputToJSON = exports.InitImageUploadOutput$ = exports.InitImageUploadOutput$outboundSchema = exports.InitImageUploadOutput$inboundSchema = exports.uploadInitImageRequestBodyFromJSON = exports.uploadInitImageRequestBodyToJSON = exports.UploadInitImageRequestBody$ = exports.UploadInitImageRequestBody$outboundSchema = exports.UploadInitImageRequestBody$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.UploadInitImageRequestBody$inboundSchema = z.object({
    extension: z.string(),
});
/** @internal */
exports.UploadInitImageRequestBody$outboundSchema = z.object({
    extension: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadInitImageRequestBody$;
(function (UploadInitImageRequestBody$) {
    /** @deprecated use `UploadInitImageRequestBody$inboundSchema` instead. */
    UploadInitImageRequestBody$.inboundSchema = exports.UploadInitImageRequestBody$inboundSchema;
    /** @deprecated use `UploadInitImageRequestBody$outboundSchema` instead. */
    UploadInitImageRequestBody$.outboundSchema = exports.UploadInitImageRequestBody$outboundSchema;
})(UploadInitImageRequestBody$ || (exports.UploadInitImageRequestBody$ = UploadInitImageRequestBody$ = {}));
function uploadInitImageRequestBodyToJSON(uploadInitImageRequestBody) {
    return JSON.stringify(exports.UploadInitImageRequestBody$outboundSchema.parse(uploadInitImageRequestBody));
}
exports.uploadInitImageRequestBodyToJSON = uploadInitImageRequestBodyToJSON;
function uploadInitImageRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadInitImageRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadInitImageRequestBody' from JSON`);
}
exports.uploadInitImageRequestBodyFromJSON = uploadInitImageRequestBodyFromJSON;
/** @internal */
exports.InitImageUploadOutput$inboundSchema = z.object({
    fields: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    key: z.nullable(z.string()).optional(),
    url: z.nullable(z.string()).optional(),
});
/** @internal */
exports.InitImageUploadOutput$outboundSchema = z.object({
    fields: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    key: z.nullable(z.string()).optional(),
    url: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InitImageUploadOutput$;
(function (InitImageUploadOutput$) {
    /** @deprecated use `InitImageUploadOutput$inboundSchema` instead. */
    InitImageUploadOutput$.inboundSchema = exports.InitImageUploadOutput$inboundSchema;
    /** @deprecated use `InitImageUploadOutput$outboundSchema` instead. */
    InitImageUploadOutput$.outboundSchema = exports.InitImageUploadOutput$outboundSchema;
})(InitImageUploadOutput$ || (exports.InitImageUploadOutput$ = InitImageUploadOutput$ = {}));
function initImageUploadOutputToJSON(initImageUploadOutput) {
    return JSON.stringify(exports.InitImageUploadOutput$outboundSchema.parse(initImageUploadOutput));
}
exports.initImageUploadOutputToJSON = initImageUploadOutputToJSON;
function initImageUploadOutputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.InitImageUploadOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InitImageUploadOutput' from JSON`);
}
exports.initImageUploadOutputFromJSON = initImageUploadOutputFromJSON;
/** @internal */
exports.UploadInitImageResponseBody$inboundSchema = z.object({
    uploadInitImage: z.nullable(z.lazy(() => exports.InitImageUploadOutput$inboundSchema))
        .optional(),
});
/** @internal */
exports.UploadInitImageResponseBody$outboundSchema = z.object({
    uploadInitImage: z.nullable(z.lazy(() => exports.InitImageUploadOutput$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadInitImageResponseBody$;
(function (UploadInitImageResponseBody$) {
    /** @deprecated use `UploadInitImageResponseBody$inboundSchema` instead. */
    UploadInitImageResponseBody$.inboundSchema = exports.UploadInitImageResponseBody$inboundSchema;
    /** @deprecated use `UploadInitImageResponseBody$outboundSchema` instead. */
    UploadInitImageResponseBody$.outboundSchema = exports.UploadInitImageResponseBody$outboundSchema;
})(UploadInitImageResponseBody$ || (exports.UploadInitImageResponseBody$ = UploadInitImageResponseBody$ = {}));
function uploadInitImageResponseBodyToJSON(uploadInitImageResponseBody) {
    return JSON.stringify(exports.UploadInitImageResponseBody$outboundSchema.parse(uploadInitImageResponseBody));
}
exports.uploadInitImageResponseBodyToJSON = uploadInitImageResponseBodyToJSON;
function uploadInitImageResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadInitImageResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadInitImageResponseBody' from JSON`);
}
exports.uploadInitImageResponseBodyFromJSON = uploadInitImageResponseBodyFromJSON;
/** @internal */
exports.UploadInitImageResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.UploadInitImageResponseBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.UploadInitImageResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.UploadInitImageResponseBody$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadInitImageResponse$;
(function (UploadInitImageResponse$) {
    /** @deprecated use `UploadInitImageResponse$inboundSchema` instead. */
    UploadInitImageResponse$.inboundSchema = exports.UploadInitImageResponse$inboundSchema;
    /** @deprecated use `UploadInitImageResponse$outboundSchema` instead. */
    UploadInitImageResponse$.outboundSchema = exports.UploadInitImageResponse$outboundSchema;
})(UploadInitImageResponse$ || (exports.UploadInitImageResponse$ = UploadInitImageResponse$ = {}));
function uploadInitImageResponseToJSON(uploadInitImageResponse) {
    return JSON.stringify(exports.UploadInitImageResponse$outboundSchema.parse(uploadInitImageResponse));
}
exports.uploadInitImageResponseToJSON = uploadInitImageResponseToJSON;
function uploadInitImageResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadInitImageResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadInitImageResponse' from JSON`);
}
exports.uploadInitImageResponseFromJSON = uploadInitImageResponseFromJSON;
//# sourceMappingURL=uploadinitimage.js.map