"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadCanvasInitImageResponseFromJSON = exports.uploadCanvasInitImageResponseToJSON = exports.UploadCanvasInitImageResponse$ = exports.UploadCanvasInitImageResponse$outboundSchema = exports.UploadCanvasInitImageResponse$inboundSchema = exports.uploadCanvasInitImageResponseBodyFromJSON = exports.uploadCanvasInitImageResponseBodyToJSON = exports.UploadCanvasInitImageResponseBody$ = exports.UploadCanvasInitImageResponseBody$outboundSchema = exports.UploadCanvasInitImageResponseBody$inboundSchema = exports.canvasInitImageUploadOutputFromJSON = exports.canvasInitImageUploadOutputToJSON = exports.CanvasInitImageUploadOutput$ = exports.CanvasInitImageUploadOutput$outboundSchema = exports.CanvasInitImageUploadOutput$inboundSchema = exports.uploadCanvasInitImageRequestBodyFromJSON = exports.uploadCanvasInitImageRequestBodyToJSON = exports.UploadCanvasInitImageRequestBody$ = exports.UploadCanvasInitImageRequestBody$outboundSchema = exports.UploadCanvasInitImageRequestBody$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.UploadCanvasInitImageRequestBody$inboundSchema = z.object({
    initExtension: z.string(),
    maskExtension: z.string(),
});
/** @internal */
exports.UploadCanvasInitImageRequestBody$outboundSchema = z.object({
    initExtension: z.string(),
    maskExtension: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadCanvasInitImageRequestBody$;
(function (UploadCanvasInitImageRequestBody$) {
    /** @deprecated use `UploadCanvasInitImageRequestBody$inboundSchema` instead. */
    UploadCanvasInitImageRequestBody$.inboundSchema = exports.UploadCanvasInitImageRequestBody$inboundSchema;
    /** @deprecated use `UploadCanvasInitImageRequestBody$outboundSchema` instead. */
    UploadCanvasInitImageRequestBody$.outboundSchema = exports.UploadCanvasInitImageRequestBody$outboundSchema;
})(UploadCanvasInitImageRequestBody$ || (exports.UploadCanvasInitImageRequestBody$ = UploadCanvasInitImageRequestBody$ = {}));
function uploadCanvasInitImageRequestBodyToJSON(uploadCanvasInitImageRequestBody) {
    return JSON.stringify(exports.UploadCanvasInitImageRequestBody$outboundSchema.parse(uploadCanvasInitImageRequestBody));
}
exports.uploadCanvasInitImageRequestBodyToJSON = uploadCanvasInitImageRequestBodyToJSON;
function uploadCanvasInitImageRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadCanvasInitImageRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadCanvasInitImageRequestBody' from JSON`);
}
exports.uploadCanvasInitImageRequestBodyFromJSON = uploadCanvasInitImageRequestBodyFromJSON;
/** @internal */
exports.CanvasInitImageUploadOutput$inboundSchema = z.object({
    initFields: z.nullable(z.string()).optional(),
    initImageId: z.nullable(z.string()).optional(),
    initKey: z.nullable(z.string()).optional(),
    initUrl: z.nullable(z.string()).optional(),
    maskFields: z.nullable(z.string()).optional(),
    maskImageId: z.nullable(z.string()).optional(),
    maskKey: z.nullable(z.string()).optional(),
    maskUrl: z.nullable(z.string()).optional(),
});
/** @internal */
exports.CanvasInitImageUploadOutput$outboundSchema = z.object({
    initFields: z.nullable(z.string()).optional(),
    initImageId: z.nullable(z.string()).optional(),
    initKey: z.nullable(z.string()).optional(),
    initUrl: z.nullable(z.string()).optional(),
    maskFields: z.nullable(z.string()).optional(),
    maskImageId: z.nullable(z.string()).optional(),
    maskKey: z.nullable(z.string()).optional(),
    maskUrl: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CanvasInitImageUploadOutput$;
(function (CanvasInitImageUploadOutput$) {
    /** @deprecated use `CanvasInitImageUploadOutput$inboundSchema` instead. */
    CanvasInitImageUploadOutput$.inboundSchema = exports.CanvasInitImageUploadOutput$inboundSchema;
    /** @deprecated use `CanvasInitImageUploadOutput$outboundSchema` instead. */
    CanvasInitImageUploadOutput$.outboundSchema = exports.CanvasInitImageUploadOutput$outboundSchema;
})(CanvasInitImageUploadOutput$ || (exports.CanvasInitImageUploadOutput$ = CanvasInitImageUploadOutput$ = {}));
function canvasInitImageUploadOutputToJSON(canvasInitImageUploadOutput) {
    return JSON.stringify(exports.CanvasInitImageUploadOutput$outboundSchema.parse(canvasInitImageUploadOutput));
}
exports.canvasInitImageUploadOutputToJSON = canvasInitImageUploadOutputToJSON;
function canvasInitImageUploadOutputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CanvasInitImageUploadOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CanvasInitImageUploadOutput' from JSON`);
}
exports.canvasInitImageUploadOutputFromJSON = canvasInitImageUploadOutputFromJSON;
/** @internal */
exports.UploadCanvasInitImageResponseBody$inboundSchema = z.object({
    uploadCanvasInitImage: z.nullable(z.lazy(() => exports.CanvasInitImageUploadOutput$inboundSchema)).optional(),
});
/** @internal */
exports.UploadCanvasInitImageResponseBody$outboundSchema = z.object({
    uploadCanvasInitImage: z.nullable(z.lazy(() => exports.CanvasInitImageUploadOutput$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadCanvasInitImageResponseBody$;
(function (UploadCanvasInitImageResponseBody$) {
    /** @deprecated use `UploadCanvasInitImageResponseBody$inboundSchema` instead. */
    UploadCanvasInitImageResponseBody$.inboundSchema = exports.UploadCanvasInitImageResponseBody$inboundSchema;
    /** @deprecated use `UploadCanvasInitImageResponseBody$outboundSchema` instead. */
    UploadCanvasInitImageResponseBody$.outboundSchema = exports.UploadCanvasInitImageResponseBody$outboundSchema;
})(UploadCanvasInitImageResponseBody$ || (exports.UploadCanvasInitImageResponseBody$ = UploadCanvasInitImageResponseBody$ = {}));
function uploadCanvasInitImageResponseBodyToJSON(uploadCanvasInitImageResponseBody) {
    return JSON.stringify(exports.UploadCanvasInitImageResponseBody$outboundSchema.parse(uploadCanvasInitImageResponseBody));
}
exports.uploadCanvasInitImageResponseBodyToJSON = uploadCanvasInitImageResponseBodyToJSON;
function uploadCanvasInitImageResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadCanvasInitImageResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadCanvasInitImageResponseBody' from JSON`);
}
exports.uploadCanvasInitImageResponseBodyFromJSON = uploadCanvasInitImageResponseBodyFromJSON;
/** @internal */
exports.UploadCanvasInitImageResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.UploadCanvasInitImageResponseBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.UploadCanvasInitImageResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.UploadCanvasInitImageResponseBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadCanvasInitImageResponse$;
(function (UploadCanvasInitImageResponse$) {
    /** @deprecated use `UploadCanvasInitImageResponse$inboundSchema` instead. */
    UploadCanvasInitImageResponse$.inboundSchema = exports.UploadCanvasInitImageResponse$inboundSchema;
    /** @deprecated use `UploadCanvasInitImageResponse$outboundSchema` instead. */
    UploadCanvasInitImageResponse$.outboundSchema = exports.UploadCanvasInitImageResponse$outboundSchema;
})(UploadCanvasInitImageResponse$ || (exports.UploadCanvasInitImageResponse$ = UploadCanvasInitImageResponse$ = {}));
function uploadCanvasInitImageResponseToJSON(uploadCanvasInitImageResponse) {
    return JSON.stringify(exports.UploadCanvasInitImageResponse$outboundSchema.parse(uploadCanvasInitImageResponse));
}
exports.uploadCanvasInitImageResponseToJSON = uploadCanvasInitImageResponseToJSON;
function uploadCanvasInitImageResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadCanvasInitImageResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadCanvasInitImageResponse' from JSON`);
}
exports.uploadCanvasInitImageResponseFromJSON = uploadCanvasInitImageResponseFromJSON;
//# sourceMappingURL=uploadcanvasinitimage.js.map