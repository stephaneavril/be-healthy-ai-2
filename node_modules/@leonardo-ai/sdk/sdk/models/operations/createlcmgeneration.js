"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLCMGenerationResponseFromJSON = exports.createLCMGenerationResponseToJSON = exports.CreateLCMGenerationResponse$ = exports.CreateLCMGenerationResponse$outboundSchema = exports.CreateLCMGenerationResponse$inboundSchema = exports.createLCMGenerationResponseBodyFromJSON = exports.createLCMGenerationResponseBodyToJSON = exports.CreateLCMGenerationResponseBody$ = exports.CreateLCMGenerationResponseBody$outboundSchema = exports.CreateLCMGenerationResponseBody$inboundSchema = exports.lcmGenerationOutputFromJSON = exports.lcmGenerationOutputToJSON = exports.LcmGenerationOutput$ = exports.LcmGenerationOutput$outboundSchema = exports.LcmGenerationOutput$inboundSchema = exports.createLCMGenerationRequestBodyFromJSON = exports.createLCMGenerationRequestBodyToJSON = exports.CreateLCMGenerationRequestBody$ = exports.CreateLCMGenerationRequestBody$outboundSchema = exports.CreateLCMGenerationRequestBody$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/** @internal */
exports.CreateLCMGenerationRequestBody$inboundSchema = z.object({
    guidance: z.nullable(z.number()).optional(),
    height: z.nullable(z.number().int().default(512)),
    imageDataUrl: z.string(),
    prompt: z.string(),
    requestTimestamp: z.string().optional(),
    seed: z.nullable(z.number().int()).optional(),
    steps: z.nullable(z.number().int()).optional(),
    strength: z.nullable(z.number()).optional(),
    style: z.nullable(shared.LcmGenerationStyle$inboundSchema).optional(),
    width: z.nullable(z.number().int().default(512)),
});
/** @internal */
exports.CreateLCMGenerationRequestBody$outboundSchema = z.object({
    guidance: z.nullable(z.number()).optional(),
    height: z.nullable(z.number().int().default(512)),
    imageDataUrl: z.string(),
    prompt: z.string(),
    requestTimestamp: z.string().optional(),
    seed: z.nullable(z.number().int()).optional(),
    steps: z.nullable(z.number().int()).optional(),
    strength: z.nullable(z.number()).optional(),
    style: z.nullable(shared.LcmGenerationStyle$outboundSchema).optional(),
    width: z.nullable(z.number().int().default(512)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateLCMGenerationRequestBody$;
(function (CreateLCMGenerationRequestBody$) {
    /** @deprecated use `CreateLCMGenerationRequestBody$inboundSchema` instead. */
    CreateLCMGenerationRequestBody$.inboundSchema = exports.CreateLCMGenerationRequestBody$inboundSchema;
    /** @deprecated use `CreateLCMGenerationRequestBody$outboundSchema` instead. */
    CreateLCMGenerationRequestBody$.outboundSchema = exports.CreateLCMGenerationRequestBody$outboundSchema;
})(CreateLCMGenerationRequestBody$ || (exports.CreateLCMGenerationRequestBody$ = CreateLCMGenerationRequestBody$ = {}));
function createLCMGenerationRequestBodyToJSON(createLCMGenerationRequestBody) {
    return JSON.stringify(exports.CreateLCMGenerationRequestBody$outboundSchema.parse(createLCMGenerationRequestBody));
}
exports.createLCMGenerationRequestBodyToJSON = createLCMGenerationRequestBodyToJSON;
function createLCMGenerationRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateLCMGenerationRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateLCMGenerationRequestBody' from JSON`);
}
exports.createLCMGenerationRequestBodyFromJSON = createLCMGenerationRequestBodyFromJSON;
/** @internal */
exports.LcmGenerationOutput$inboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    imageDataUrl: z.array(z.string()).optional(),
    requestTimestamp: z.string().optional(),
});
/** @internal */
exports.LcmGenerationOutput$outboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    imageDataUrl: z.array(z.string()).optional(),
    requestTimestamp: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LcmGenerationOutput$;
(function (LcmGenerationOutput$) {
    /** @deprecated use `LcmGenerationOutput$inboundSchema` instead. */
    LcmGenerationOutput$.inboundSchema = exports.LcmGenerationOutput$inboundSchema;
    /** @deprecated use `LcmGenerationOutput$outboundSchema` instead. */
    LcmGenerationOutput$.outboundSchema = exports.LcmGenerationOutput$outboundSchema;
})(LcmGenerationOutput$ || (exports.LcmGenerationOutput$ = LcmGenerationOutput$ = {}));
function lcmGenerationOutputToJSON(lcmGenerationOutput) {
    return JSON.stringify(exports.LcmGenerationOutput$outboundSchema.parse(lcmGenerationOutput));
}
exports.lcmGenerationOutputToJSON = lcmGenerationOutputToJSON;
function lcmGenerationOutputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LcmGenerationOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LcmGenerationOutput' from JSON`);
}
exports.lcmGenerationOutputFromJSON = lcmGenerationOutputFromJSON;
/** @internal */
exports.CreateLCMGenerationResponseBody$inboundSchema = z.object({
    lcmGenerationJob: z.nullable(z.lazy(() => exports.LcmGenerationOutput$inboundSchema))
        .optional(),
});
/** @internal */
exports.CreateLCMGenerationResponseBody$outboundSchema = z.object({
    lcmGenerationJob: z.nullable(z.lazy(() => exports.LcmGenerationOutput$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateLCMGenerationResponseBody$;
(function (CreateLCMGenerationResponseBody$) {
    /** @deprecated use `CreateLCMGenerationResponseBody$inboundSchema` instead. */
    CreateLCMGenerationResponseBody$.inboundSchema = exports.CreateLCMGenerationResponseBody$inboundSchema;
    /** @deprecated use `CreateLCMGenerationResponseBody$outboundSchema` instead. */
    CreateLCMGenerationResponseBody$.outboundSchema = exports.CreateLCMGenerationResponseBody$outboundSchema;
})(CreateLCMGenerationResponseBody$ || (exports.CreateLCMGenerationResponseBody$ = CreateLCMGenerationResponseBody$ = {}));
function createLCMGenerationResponseBodyToJSON(createLCMGenerationResponseBody) {
    return JSON.stringify(exports.CreateLCMGenerationResponseBody$outboundSchema.parse(createLCMGenerationResponseBody));
}
exports.createLCMGenerationResponseBodyToJSON = createLCMGenerationResponseBodyToJSON;
function createLCMGenerationResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateLCMGenerationResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateLCMGenerationResponseBody' from JSON`);
}
exports.createLCMGenerationResponseBodyFromJSON = createLCMGenerationResponseBodyFromJSON;
/** @internal */
exports.CreateLCMGenerationResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.CreateLCMGenerationResponseBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.CreateLCMGenerationResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.CreateLCMGenerationResponseBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateLCMGenerationResponse$;
(function (CreateLCMGenerationResponse$) {
    /** @deprecated use `CreateLCMGenerationResponse$inboundSchema` instead. */
    CreateLCMGenerationResponse$.inboundSchema = exports.CreateLCMGenerationResponse$inboundSchema;
    /** @deprecated use `CreateLCMGenerationResponse$outboundSchema` instead. */
    CreateLCMGenerationResponse$.outboundSchema = exports.CreateLCMGenerationResponse$outboundSchema;
})(CreateLCMGenerationResponse$ || (exports.CreateLCMGenerationResponse$ = CreateLCMGenerationResponse$ = {}));
function createLCMGenerationResponseToJSON(createLCMGenerationResponse) {
    return JSON.stringify(exports.CreateLCMGenerationResponse$outboundSchema.parse(createLCMGenerationResponse));
}
exports.createLCMGenerationResponseToJSON = createLCMGenerationResponseToJSON;
function createLCMGenerationResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateLCMGenerationResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateLCMGenerationResponse' from JSON`);
}
exports.createLCMGenerationResponseFromJSON = createLCMGenerationResponseFromJSON;
//# sourceMappingURL=createlcmgeneration.js.map