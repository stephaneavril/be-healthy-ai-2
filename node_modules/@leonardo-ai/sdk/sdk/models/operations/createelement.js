"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createElementResponseFromJSON = exports.createElementResponseToJSON = exports.CreateElementResponse$ = exports.CreateElementResponse$outboundSchema = exports.CreateElementResponse$inboundSchema = exports.createElementResponseBodyFromJSON = exports.createElementResponseBodyToJSON = exports.CreateElementResponseBody$ = exports.CreateElementResponseBody$outboundSchema = exports.CreateElementResponseBody$inboundSchema = exports.sdTrainingOutputFromJSON = exports.sdTrainingOutputToJSON = exports.SDTrainingOutput$ = exports.SDTrainingOutput$outboundSchema = exports.SDTrainingOutput$inboundSchema = exports.createElementRequestBodyFromJSON = exports.createElementRequestBodyToJSON = exports.CreateElementRequestBody$ = exports.CreateElementRequestBody$outboundSchema = exports.CreateElementRequestBody$inboundSchema = exports.SdVersions$ = exports.SdVersions$outboundSchema = exports.SdVersions$inboundSchema = exports.SdVersions = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/**
 * The base version of stable diffusion to use if not using a custom model.
 */
var SdVersions;
(function (SdVersions) {
    SdVersions["Sdxl09"] = "SDXL_0_9";
    SdVersions["Sdxl10"] = "SDXL_1_0";
    SdVersions["LeonardoDiffusionXl"] = "LEONARDO_DIFFUSION_XL";
    SdVersions["LeonardoLightningXl"] = "LEONARDO_LIGHTNING_XL";
    SdVersions["VisionXl"] = "VISION_XL";
    SdVersions["KinoXl"] = "KINO_XL";
    SdVersions["AlbedoXl"] = "ALBEDO_XL";
})(SdVersions || (exports.SdVersions = SdVersions = {}));
/** @internal */
exports.SdVersions$inboundSchema = z
    .nativeEnum(SdVersions);
/** @internal */
exports.SdVersions$outboundSchema = exports.SdVersions$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SdVersions$;
(function (SdVersions$) {
    /** @deprecated use `SdVersions$inboundSchema` instead. */
    SdVersions$.inboundSchema = exports.SdVersions$inboundSchema;
    /** @deprecated use `SdVersions$outboundSchema` instead. */
    SdVersions$.outboundSchema = exports.SdVersions$outboundSchema;
})(SdVersions$ || (exports.SdVersions$ = SdVersions$ = {}));
/** @internal */
exports.CreateElementRequestBody$inboundSchema = z.object({
    datasetId: z.string().default(""),
    description: z.nullable(z.string().default("")),
    instance_prompt: z.string().default("a character"),
    learning_rate: z.number().default(0.000001),
    lora_focus: z.string().default("General"),
    name: z.string().default("placeholder"),
    num_train_epochs: z.number().int().default(100),
    resolution: z.nullable(z.number().int().default(1024)),
    sd_version: exports.SdVersions$inboundSchema.default(SdVersions.Sdxl09),
    train_text_encoder: z.boolean().default(true),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "instance_prompt": "instancePrompt",
        "learning_rate": "learningRate",
        "lora_focus": "loraFocus",
        "num_train_epochs": "numTrainEpochs",
        "sd_version": "sdVersion",
        "train_text_encoder": "trainTextEncoder",
    });
});
/** @internal */
exports.CreateElementRequestBody$outboundSchema = z.object({
    datasetId: z.string().default(""),
    description: z.nullable(z.string().default("")),
    instancePrompt: z.string().default("a character"),
    learningRate: z.number().default(0.000001),
    loraFocus: z.string().default("General"),
    name: z.string().default("placeholder"),
    numTrainEpochs: z.number().int().default(100),
    resolution: z.nullable(z.number().int().default(1024)),
    sdVersion: exports.SdVersions$outboundSchema.default(SdVersions.Sdxl09),
    trainTextEncoder: z.boolean().default(true),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        instancePrompt: "instance_prompt",
        learningRate: "learning_rate",
        loraFocus: "lora_focus",
        numTrainEpochs: "num_train_epochs",
        sdVersion: "sd_version",
        trainTextEncoder: "train_text_encoder",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateElementRequestBody$;
(function (CreateElementRequestBody$) {
    /** @deprecated use `CreateElementRequestBody$inboundSchema` instead. */
    CreateElementRequestBody$.inboundSchema = exports.CreateElementRequestBody$inboundSchema;
    /** @deprecated use `CreateElementRequestBody$outboundSchema` instead. */
    CreateElementRequestBody$.outboundSchema = exports.CreateElementRequestBody$outboundSchema;
})(CreateElementRequestBody$ || (exports.CreateElementRequestBody$ = CreateElementRequestBody$ = {}));
function createElementRequestBodyToJSON(createElementRequestBody) {
    return JSON.stringify(exports.CreateElementRequestBody$outboundSchema.parse(createElementRequestBody));
}
exports.createElementRequestBodyToJSON = createElementRequestBodyToJSON;
function createElementRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateElementRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateElementRequestBody' from JSON`);
}
exports.createElementRequestBodyFromJSON = createElementRequestBodyFromJSON;
/** @internal */
exports.SDTrainingOutput$inboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    userLoraId: z.number().int().optional(),
});
/** @internal */
exports.SDTrainingOutput$outboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    userLoraId: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SDTrainingOutput$;
(function (SDTrainingOutput$) {
    /** @deprecated use `SDTrainingOutput$inboundSchema` instead. */
    SDTrainingOutput$.inboundSchema = exports.SDTrainingOutput$inboundSchema;
    /** @deprecated use `SDTrainingOutput$outboundSchema` instead. */
    SDTrainingOutput$.outboundSchema = exports.SDTrainingOutput$outboundSchema;
})(SDTrainingOutput$ || (exports.SDTrainingOutput$ = SDTrainingOutput$ = {}));
function sdTrainingOutputToJSON(sdTrainingOutput) {
    return JSON.stringify(exports.SDTrainingOutput$outboundSchema.parse(sdTrainingOutput));
}
exports.sdTrainingOutputToJSON = sdTrainingOutputToJSON;
function sdTrainingOutputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SDTrainingOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SDTrainingOutput' from JSON`);
}
exports.sdTrainingOutputFromJSON = sdTrainingOutputFromJSON;
/** @internal */
exports.CreateElementResponseBody$inboundSchema = z.object({
    sdTrainingJob: z.nullable(z.lazy(() => exports.SDTrainingOutput$inboundSchema))
        .optional(),
});
/** @internal */
exports.CreateElementResponseBody$outboundSchema = z.object({
    sdTrainingJob: z.nullable(z.lazy(() => exports.SDTrainingOutput$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateElementResponseBody$;
(function (CreateElementResponseBody$) {
    /** @deprecated use `CreateElementResponseBody$inboundSchema` instead. */
    CreateElementResponseBody$.inboundSchema = exports.CreateElementResponseBody$inboundSchema;
    /** @deprecated use `CreateElementResponseBody$outboundSchema` instead. */
    CreateElementResponseBody$.outboundSchema = exports.CreateElementResponseBody$outboundSchema;
})(CreateElementResponseBody$ || (exports.CreateElementResponseBody$ = CreateElementResponseBody$ = {}));
function createElementResponseBodyToJSON(createElementResponseBody) {
    return JSON.stringify(exports.CreateElementResponseBody$outboundSchema.parse(createElementResponseBody));
}
exports.createElementResponseBodyToJSON = createElementResponseBodyToJSON;
function createElementResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateElementResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateElementResponseBody' from JSON`);
}
exports.createElementResponseBodyFromJSON = createElementResponseBodyFromJSON;
/** @internal */
exports.CreateElementResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.CreateElementResponseBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.CreateElementResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.CreateElementResponseBody$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateElementResponse$;
(function (CreateElementResponse$) {
    /** @deprecated use `CreateElementResponse$inboundSchema` instead. */
    CreateElementResponse$.inboundSchema = exports.CreateElementResponse$inboundSchema;
    /** @deprecated use `CreateElementResponse$outboundSchema` instead. */
    CreateElementResponse$.outboundSchema = exports.CreateElementResponse$outboundSchema;
})(CreateElementResponse$ || (exports.CreateElementResponse$ = CreateElementResponse$ = {}));
function createElementResponseToJSON(createElementResponse) {
    return JSON.stringify(exports.CreateElementResponse$outboundSchema.parse(createElementResponse));
}
exports.createElementResponseToJSON = createElementResponseToJSON;
function createElementResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateElementResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateElementResponse' from JSON`);
}
exports.createElementResponseFromJSON = createElementResponseFromJSON;
//# sourceMappingURL=createelement.js.map