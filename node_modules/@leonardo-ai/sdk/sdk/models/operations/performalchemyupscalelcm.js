"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.performAlchemyUpscaleLCMResponseFromJSON = exports.performAlchemyUpscaleLCMResponseToJSON = exports.PerformAlchemyUpscaleLCMResponse$ = exports.PerformAlchemyUpscaleLCMResponse$outboundSchema = exports.PerformAlchemyUpscaleLCMResponse$inboundSchema = exports.performAlchemyUpscaleLCMResponseBodyFromJSON = exports.performAlchemyUpscaleLCMResponseBodyToJSON = exports.PerformAlchemyUpscaleLCMResponseBody$ = exports.PerformAlchemyUpscaleLCMResponseBody$outboundSchema = exports.PerformAlchemyUpscaleLCMResponseBody$inboundSchema = exports.performAlchemyUpscaleLCMLCMGenerationOutputFromJSON = exports.performAlchemyUpscaleLCMLCMGenerationOutputToJSON = exports.PerformAlchemyUpscaleLCMLCMGenerationOutput$ = exports.PerformAlchemyUpscaleLCMLCMGenerationOutput$outboundSchema = exports.PerformAlchemyUpscaleLCMLCMGenerationOutput$inboundSchema = exports.performAlchemyUpscaleLCMRequestBodyFromJSON = exports.performAlchemyUpscaleLCMRequestBodyToJSON = exports.PerformAlchemyUpscaleLCMRequestBody$ = exports.PerformAlchemyUpscaleLCMRequestBody$outboundSchema = exports.PerformAlchemyUpscaleLCMRequestBody$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/** @internal */
exports.PerformAlchemyUpscaleLCMRequestBody$inboundSchema = z.object({
    guidance: z.nullable(z.number()).optional(),
    height: z.nullable(z.number().int().default(512)),
    imageDataUrl: z.string(),
    prompt: z.string(),
    refineCreative: z.nullable(z.boolean()).optional(),
    refineStrength: z.nullable(z.number()).optional(),
    requestTimestamp: z.string().optional(),
    seed: z.nullable(z.number().int()).optional(),
    steps: z.nullable(z.number().int()).optional(),
    strength: z.nullable(z.number()).optional(),
    style: z.nullable(shared.LcmGenerationStyle$inboundSchema).optional(),
    width: z.nullable(z.number().int().default(512)),
});
/** @internal */
exports.PerformAlchemyUpscaleLCMRequestBody$outboundSchema = z.object({
    guidance: z.nullable(z.number()).optional(),
    height: z.nullable(z.number().int().default(512)),
    imageDataUrl: z.string(),
    prompt: z.string(),
    refineCreative: z.nullable(z.boolean()).optional(),
    refineStrength: z.nullable(z.number()).optional(),
    requestTimestamp: z.string().optional(),
    seed: z.nullable(z.number().int()).optional(),
    steps: z.nullable(z.number().int()).optional(),
    strength: z.nullable(z.number()).optional(),
    style: z.nullable(shared.LcmGenerationStyle$outboundSchema).optional(),
    width: z.nullable(z.number().int().default(512)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PerformAlchemyUpscaleLCMRequestBody$;
(function (PerformAlchemyUpscaleLCMRequestBody$) {
    /** @deprecated use `PerformAlchemyUpscaleLCMRequestBody$inboundSchema` instead. */
    PerformAlchemyUpscaleLCMRequestBody$.inboundSchema = exports.PerformAlchemyUpscaleLCMRequestBody$inboundSchema;
    /** @deprecated use `PerformAlchemyUpscaleLCMRequestBody$outboundSchema` instead. */
    PerformAlchemyUpscaleLCMRequestBody$.outboundSchema = exports.PerformAlchemyUpscaleLCMRequestBody$outboundSchema;
})(PerformAlchemyUpscaleLCMRequestBody$ || (exports.PerformAlchemyUpscaleLCMRequestBody$ = PerformAlchemyUpscaleLCMRequestBody$ = {}));
function performAlchemyUpscaleLCMRequestBodyToJSON(performAlchemyUpscaleLCMRequestBody) {
    return JSON.stringify(exports.PerformAlchemyUpscaleLCMRequestBody$outboundSchema.parse(performAlchemyUpscaleLCMRequestBody));
}
exports.performAlchemyUpscaleLCMRequestBodyToJSON = performAlchemyUpscaleLCMRequestBodyToJSON;
function performAlchemyUpscaleLCMRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PerformAlchemyUpscaleLCMRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PerformAlchemyUpscaleLCMRequestBody' from JSON`);
}
exports.performAlchemyUpscaleLCMRequestBodyFromJSON = performAlchemyUpscaleLCMRequestBodyFromJSON;
/** @internal */
exports.PerformAlchemyUpscaleLCMLCMGenerationOutput$inboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    generatedImageId: z.string().optional(),
    generationId: z.array(z.string()).optional(),
    imageDataUrl: z.array(z.string()).optional(),
    requestTimestamp: z.string().optional(),
    variationId: z.array(z.string()).optional(),
});
/** @internal */
exports.PerformAlchemyUpscaleLCMLCMGenerationOutput$outboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    generatedImageId: z.string().optional(),
    generationId: z.array(z.string()).optional(),
    imageDataUrl: z.array(z.string()).optional(),
    requestTimestamp: z.string().optional(),
    variationId: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PerformAlchemyUpscaleLCMLCMGenerationOutput$;
(function (PerformAlchemyUpscaleLCMLCMGenerationOutput$) {
    /** @deprecated use `PerformAlchemyUpscaleLCMLCMGenerationOutput$inboundSchema` instead. */
    PerformAlchemyUpscaleLCMLCMGenerationOutput$.inboundSchema = exports.PerformAlchemyUpscaleLCMLCMGenerationOutput$inboundSchema;
    /** @deprecated use `PerformAlchemyUpscaleLCMLCMGenerationOutput$outboundSchema` instead. */
    PerformAlchemyUpscaleLCMLCMGenerationOutput$.outboundSchema = exports.PerformAlchemyUpscaleLCMLCMGenerationOutput$outboundSchema;
})(PerformAlchemyUpscaleLCMLCMGenerationOutput$ || (exports.PerformAlchemyUpscaleLCMLCMGenerationOutput$ = PerformAlchemyUpscaleLCMLCMGenerationOutput$ = {}));
function performAlchemyUpscaleLCMLCMGenerationOutputToJSON(performAlchemyUpscaleLCMLCMGenerationOutput) {
    return JSON.stringify(exports.PerformAlchemyUpscaleLCMLCMGenerationOutput$outboundSchema.parse(performAlchemyUpscaleLCMLCMGenerationOutput));
}
exports.performAlchemyUpscaleLCMLCMGenerationOutputToJSON = performAlchemyUpscaleLCMLCMGenerationOutputToJSON;
function performAlchemyUpscaleLCMLCMGenerationOutputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PerformAlchemyUpscaleLCMLCMGenerationOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PerformAlchemyUpscaleLCMLCMGenerationOutput' from JSON`);
}
exports.performAlchemyUpscaleLCMLCMGenerationOutputFromJSON = performAlchemyUpscaleLCMLCMGenerationOutputFromJSON;
/** @internal */
exports.PerformAlchemyUpscaleLCMResponseBody$inboundSchema = z.object({
    lcmGenerationJob: z.nullable(z.lazy(() => exports.PerformAlchemyUpscaleLCMLCMGenerationOutput$inboundSchema)).optional(),
});
/** @internal */
exports.PerformAlchemyUpscaleLCMResponseBody$outboundSchema = z.object({
    lcmGenerationJob: z.nullable(z.lazy(() => exports.PerformAlchemyUpscaleLCMLCMGenerationOutput$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PerformAlchemyUpscaleLCMResponseBody$;
(function (PerformAlchemyUpscaleLCMResponseBody$) {
    /** @deprecated use `PerformAlchemyUpscaleLCMResponseBody$inboundSchema` instead. */
    PerformAlchemyUpscaleLCMResponseBody$.inboundSchema = exports.PerformAlchemyUpscaleLCMResponseBody$inboundSchema;
    /** @deprecated use `PerformAlchemyUpscaleLCMResponseBody$outboundSchema` instead. */
    PerformAlchemyUpscaleLCMResponseBody$.outboundSchema = exports.PerformAlchemyUpscaleLCMResponseBody$outboundSchema;
})(PerformAlchemyUpscaleLCMResponseBody$ || (exports.PerformAlchemyUpscaleLCMResponseBody$ = PerformAlchemyUpscaleLCMResponseBody$ = {}));
function performAlchemyUpscaleLCMResponseBodyToJSON(performAlchemyUpscaleLCMResponseBody) {
    return JSON.stringify(exports.PerformAlchemyUpscaleLCMResponseBody$outboundSchema.parse(performAlchemyUpscaleLCMResponseBody));
}
exports.performAlchemyUpscaleLCMResponseBodyToJSON = performAlchemyUpscaleLCMResponseBodyToJSON;
function performAlchemyUpscaleLCMResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PerformAlchemyUpscaleLCMResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PerformAlchemyUpscaleLCMResponseBody' from JSON`);
}
exports.performAlchemyUpscaleLCMResponseBodyFromJSON = performAlchemyUpscaleLCMResponseBodyFromJSON;
/** @internal */
exports.PerformAlchemyUpscaleLCMResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.PerformAlchemyUpscaleLCMResponseBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.PerformAlchemyUpscaleLCMResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.PerformAlchemyUpscaleLCMResponseBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PerformAlchemyUpscaleLCMResponse$;
(function (PerformAlchemyUpscaleLCMResponse$) {
    /** @deprecated use `PerformAlchemyUpscaleLCMResponse$inboundSchema` instead. */
    PerformAlchemyUpscaleLCMResponse$.inboundSchema = exports.PerformAlchemyUpscaleLCMResponse$inboundSchema;
    /** @deprecated use `PerformAlchemyUpscaleLCMResponse$outboundSchema` instead. */
    PerformAlchemyUpscaleLCMResponse$.outboundSchema = exports.PerformAlchemyUpscaleLCMResponse$outboundSchema;
})(PerformAlchemyUpscaleLCMResponse$ || (exports.PerformAlchemyUpscaleLCMResponse$ = PerformAlchemyUpscaleLCMResponse$ = {}));
function performAlchemyUpscaleLCMResponseToJSON(performAlchemyUpscaleLCMResponse) {
    return JSON.stringify(exports.PerformAlchemyUpscaleLCMResponse$outboundSchema.parse(performAlchemyUpscaleLCMResponse));
}
exports.performAlchemyUpscaleLCMResponseToJSON = performAlchemyUpscaleLCMResponseToJSON;
function performAlchemyUpscaleLCMResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PerformAlchemyUpscaleLCMResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PerformAlchemyUpscaleLCMResponse' from JSON`);
}
exports.performAlchemyUpscaleLCMResponseFromJSON = performAlchemyUpscaleLCMResponseFromJSON;
//# sourceMappingURL=performalchemyupscalelcm.js.map