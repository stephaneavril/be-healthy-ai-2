"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadDatasetImageFromGenResponseFromJSON = exports.uploadDatasetImageFromGenResponseToJSON = exports.UploadDatasetImageFromGenResponse$ = exports.UploadDatasetImageFromGenResponse$outboundSchema = exports.UploadDatasetImageFromGenResponse$inboundSchema = exports.uploadDatasetImageFromGenResponseBodyFromJSON = exports.uploadDatasetImageFromGenResponseBodyToJSON = exports.UploadDatasetImageFromGenResponseBody$ = exports.UploadDatasetImageFromGenResponseBody$outboundSchema = exports.UploadDatasetImageFromGenResponseBody$inboundSchema = exports.datasetGenUploadOutputFromJSON = exports.datasetGenUploadOutputToJSON = exports.DatasetGenUploadOutput$ = exports.DatasetGenUploadOutput$outboundSchema = exports.DatasetGenUploadOutput$inboundSchema = exports.uploadDatasetImageFromGenRequestFromJSON = exports.uploadDatasetImageFromGenRequestToJSON = exports.UploadDatasetImageFromGenRequest$ = exports.UploadDatasetImageFromGenRequest$outboundSchema = exports.UploadDatasetImageFromGenRequest$inboundSchema = exports.uploadDatasetImageFromGenRequestBodyFromJSON = exports.uploadDatasetImageFromGenRequestBodyToJSON = exports.UploadDatasetImageFromGenRequestBody$ = exports.UploadDatasetImageFromGenRequestBody$outboundSchema = exports.UploadDatasetImageFromGenRequestBody$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.UploadDatasetImageFromGenRequestBody$inboundSchema = z.object({
    generatedImageId: z.string(),
});
/** @internal */
exports.UploadDatasetImageFromGenRequestBody$outboundSchema = z.object({
    generatedImageId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadDatasetImageFromGenRequestBody$;
(function (UploadDatasetImageFromGenRequestBody$) {
    /** @deprecated use `UploadDatasetImageFromGenRequestBody$inboundSchema` instead. */
    UploadDatasetImageFromGenRequestBody$.inboundSchema = exports.UploadDatasetImageFromGenRequestBody$inboundSchema;
    /** @deprecated use `UploadDatasetImageFromGenRequestBody$outboundSchema` instead. */
    UploadDatasetImageFromGenRequestBody$.outboundSchema = exports.UploadDatasetImageFromGenRequestBody$outboundSchema;
})(UploadDatasetImageFromGenRequestBody$ || (exports.UploadDatasetImageFromGenRequestBody$ = UploadDatasetImageFromGenRequestBody$ = {}));
function uploadDatasetImageFromGenRequestBodyToJSON(uploadDatasetImageFromGenRequestBody) {
    return JSON.stringify(exports.UploadDatasetImageFromGenRequestBody$outboundSchema.parse(uploadDatasetImageFromGenRequestBody));
}
exports.uploadDatasetImageFromGenRequestBodyToJSON = uploadDatasetImageFromGenRequestBodyToJSON;
function uploadDatasetImageFromGenRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadDatasetImageFromGenRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadDatasetImageFromGenRequestBody' from JSON`);
}
exports.uploadDatasetImageFromGenRequestBodyFromJSON = uploadDatasetImageFromGenRequestBodyFromJSON;
/** @internal */
exports.UploadDatasetImageFromGenRequest$inboundSchema = z.object({
    RequestBody: z.lazy(() => exports.UploadDatasetImageFromGenRequestBody$inboundSchema),
    datasetId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
exports.UploadDatasetImageFromGenRequest$outboundSchema = z.object({
    requestBody: z.lazy(() => exports.UploadDatasetImageFromGenRequestBody$outboundSchema),
    datasetId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadDatasetImageFromGenRequest$;
(function (UploadDatasetImageFromGenRequest$) {
    /** @deprecated use `UploadDatasetImageFromGenRequest$inboundSchema` instead. */
    UploadDatasetImageFromGenRequest$.inboundSchema = exports.UploadDatasetImageFromGenRequest$inboundSchema;
    /** @deprecated use `UploadDatasetImageFromGenRequest$outboundSchema` instead. */
    UploadDatasetImageFromGenRequest$.outboundSchema = exports.UploadDatasetImageFromGenRequest$outboundSchema;
})(UploadDatasetImageFromGenRequest$ || (exports.UploadDatasetImageFromGenRequest$ = UploadDatasetImageFromGenRequest$ = {}));
function uploadDatasetImageFromGenRequestToJSON(uploadDatasetImageFromGenRequest) {
    return JSON.stringify(exports.UploadDatasetImageFromGenRequest$outboundSchema.parse(uploadDatasetImageFromGenRequest));
}
exports.uploadDatasetImageFromGenRequestToJSON = uploadDatasetImageFromGenRequestToJSON;
function uploadDatasetImageFromGenRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadDatasetImageFromGenRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadDatasetImageFromGenRequest' from JSON`);
}
exports.uploadDatasetImageFromGenRequestFromJSON = uploadDatasetImageFromGenRequestFromJSON;
/** @internal */
exports.DatasetGenUploadOutput$inboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/** @internal */
exports.DatasetGenUploadOutput$outboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DatasetGenUploadOutput$;
(function (DatasetGenUploadOutput$) {
    /** @deprecated use `DatasetGenUploadOutput$inboundSchema` instead. */
    DatasetGenUploadOutput$.inboundSchema = exports.DatasetGenUploadOutput$inboundSchema;
    /** @deprecated use `DatasetGenUploadOutput$outboundSchema` instead. */
    DatasetGenUploadOutput$.outboundSchema = exports.DatasetGenUploadOutput$outboundSchema;
})(DatasetGenUploadOutput$ || (exports.DatasetGenUploadOutput$ = DatasetGenUploadOutput$ = {}));
function datasetGenUploadOutputToJSON(datasetGenUploadOutput) {
    return JSON.stringify(exports.DatasetGenUploadOutput$outboundSchema.parse(datasetGenUploadOutput));
}
exports.datasetGenUploadOutputToJSON = datasetGenUploadOutputToJSON;
function datasetGenUploadOutputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DatasetGenUploadOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DatasetGenUploadOutput' from JSON`);
}
exports.datasetGenUploadOutputFromJSON = datasetGenUploadOutputFromJSON;
/** @internal */
exports.UploadDatasetImageFromGenResponseBody$inboundSchema = z.object({
    uploadDatasetImageFromGen: z.nullable(z.lazy(() => exports.DatasetGenUploadOutput$inboundSchema)).optional(),
});
/** @internal */
exports.UploadDatasetImageFromGenResponseBody$outboundSchema = z.object({
    uploadDatasetImageFromGen: z.nullable(z.lazy(() => exports.DatasetGenUploadOutput$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadDatasetImageFromGenResponseBody$;
(function (UploadDatasetImageFromGenResponseBody$) {
    /** @deprecated use `UploadDatasetImageFromGenResponseBody$inboundSchema` instead. */
    UploadDatasetImageFromGenResponseBody$.inboundSchema = exports.UploadDatasetImageFromGenResponseBody$inboundSchema;
    /** @deprecated use `UploadDatasetImageFromGenResponseBody$outboundSchema` instead. */
    UploadDatasetImageFromGenResponseBody$.outboundSchema = exports.UploadDatasetImageFromGenResponseBody$outboundSchema;
})(UploadDatasetImageFromGenResponseBody$ || (exports.UploadDatasetImageFromGenResponseBody$ = UploadDatasetImageFromGenResponseBody$ = {}));
function uploadDatasetImageFromGenResponseBodyToJSON(uploadDatasetImageFromGenResponseBody) {
    return JSON.stringify(exports.UploadDatasetImageFromGenResponseBody$outboundSchema.parse(uploadDatasetImageFromGenResponseBody));
}
exports.uploadDatasetImageFromGenResponseBodyToJSON = uploadDatasetImageFromGenResponseBodyToJSON;
function uploadDatasetImageFromGenResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadDatasetImageFromGenResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadDatasetImageFromGenResponseBody' from JSON`);
}
exports.uploadDatasetImageFromGenResponseBodyFromJSON = uploadDatasetImageFromGenResponseBodyFromJSON;
/** @internal */
exports.UploadDatasetImageFromGenResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.UploadDatasetImageFromGenResponseBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.UploadDatasetImageFromGenResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.UploadDatasetImageFromGenResponseBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadDatasetImageFromGenResponse$;
(function (UploadDatasetImageFromGenResponse$) {
    /** @deprecated use `UploadDatasetImageFromGenResponse$inboundSchema` instead. */
    UploadDatasetImageFromGenResponse$.inboundSchema = exports.UploadDatasetImageFromGenResponse$inboundSchema;
    /** @deprecated use `UploadDatasetImageFromGenResponse$outboundSchema` instead. */
    UploadDatasetImageFromGenResponse$.outboundSchema = exports.UploadDatasetImageFromGenResponse$outboundSchema;
})(UploadDatasetImageFromGenResponse$ || (exports.UploadDatasetImageFromGenResponse$ = UploadDatasetImageFromGenResponse$ = {}));
function uploadDatasetImageFromGenResponseToJSON(uploadDatasetImageFromGenResponse) {
    return JSON.stringify(exports.UploadDatasetImageFromGenResponse$outboundSchema.parse(uploadDatasetImageFromGenResponse));
}
exports.uploadDatasetImageFromGenResponseToJSON = uploadDatasetImageFromGenResponseToJSON;
function uploadDatasetImageFromGenResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadDatasetImageFromGenResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadDatasetImageFromGenResponse' from JSON`);
}
exports.uploadDatasetImageFromGenResponseFromJSON = uploadDatasetImageFromGenResponseFromJSON;
//# sourceMappingURL=uploaddatasetimagefromgen.js.map