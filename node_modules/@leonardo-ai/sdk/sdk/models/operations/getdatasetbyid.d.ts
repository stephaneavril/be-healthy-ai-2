import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetDatasetByIdRequest = {
    /**
     * The ID of the dataset to return.
     */
    id: string;
};
/**
 * columns and relationships of "dataset_images"
 */
export type DatasetImages = {
    createdAt?: string | undefined;
    id?: string | null | undefined;
    url?: string | undefined;
};
/**
 * columns and relationships of "datasets"
 */
export type GetDatasetByIdDatasets = {
    createdAt?: string | undefined;
    datasetImages?: Array<DatasetImages> | undefined;
    description?: string | null | undefined;
    id?: string | null | undefined;
    name?: string | undefined;
    updatedAt?: string | undefined;
};
/**
 * Responses for GET /datasets/{id}
 */
export type GetDatasetByIdResponseBody = {
    /**
     * columns and relationships of "datasets"
     */
    datasetsByPk?: GetDatasetByIdDatasets | null | undefined;
};
export type GetDatasetByIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for GET /datasets/{id}
     */
    object?: GetDatasetByIdResponseBody | undefined;
};
/** @internal */
export declare const GetDatasetByIdRequest$inboundSchema: z.ZodType<GetDatasetByIdRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDatasetByIdRequest$Outbound = {
    id: string;
};
/** @internal */
export declare const GetDatasetByIdRequest$outboundSchema: z.ZodType<GetDatasetByIdRequest$Outbound, z.ZodTypeDef, GetDatasetByIdRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDatasetByIdRequest$ {
    /** @deprecated use `GetDatasetByIdRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDatasetByIdRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDatasetByIdRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDatasetByIdRequest$Outbound, z.ZodTypeDef, GetDatasetByIdRequest>;
    /** @deprecated use `GetDatasetByIdRequest$Outbound` instead. */
    type Outbound = GetDatasetByIdRequest$Outbound;
}
export declare function getDatasetByIdRequestToJSON(getDatasetByIdRequest: GetDatasetByIdRequest): string;
export declare function getDatasetByIdRequestFromJSON(jsonString: string): SafeParseResult<GetDatasetByIdRequest, SDKValidationError>;
/** @internal */
export declare const DatasetImages$inboundSchema: z.ZodType<DatasetImages, z.ZodTypeDef, unknown>;
/** @internal */
export type DatasetImages$Outbound = {
    createdAt?: string | undefined;
    id?: string | null | undefined;
    url?: string | undefined;
};
/** @internal */
export declare const DatasetImages$outboundSchema: z.ZodType<DatasetImages$Outbound, z.ZodTypeDef, DatasetImages>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DatasetImages$ {
    /** @deprecated use `DatasetImages$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DatasetImages, z.ZodTypeDef, unknown>;
    /** @deprecated use `DatasetImages$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DatasetImages$Outbound, z.ZodTypeDef, DatasetImages>;
    /** @deprecated use `DatasetImages$Outbound` instead. */
    type Outbound = DatasetImages$Outbound;
}
export declare function datasetImagesToJSON(datasetImages: DatasetImages): string;
export declare function datasetImagesFromJSON(jsonString: string): SafeParseResult<DatasetImages, SDKValidationError>;
/** @internal */
export declare const GetDatasetByIdDatasets$inboundSchema: z.ZodType<GetDatasetByIdDatasets, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDatasetByIdDatasets$Outbound = {
    createdAt?: string | undefined;
    dataset_images?: Array<DatasetImages$Outbound> | undefined;
    description?: string | null | undefined;
    id?: string | null | undefined;
    name?: string | undefined;
    updatedAt?: string | undefined;
};
/** @internal */
export declare const GetDatasetByIdDatasets$outboundSchema: z.ZodType<GetDatasetByIdDatasets$Outbound, z.ZodTypeDef, GetDatasetByIdDatasets>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDatasetByIdDatasets$ {
    /** @deprecated use `GetDatasetByIdDatasets$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDatasetByIdDatasets, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDatasetByIdDatasets$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDatasetByIdDatasets$Outbound, z.ZodTypeDef, GetDatasetByIdDatasets>;
    /** @deprecated use `GetDatasetByIdDatasets$Outbound` instead. */
    type Outbound = GetDatasetByIdDatasets$Outbound;
}
export declare function getDatasetByIdDatasetsToJSON(getDatasetByIdDatasets: GetDatasetByIdDatasets): string;
export declare function getDatasetByIdDatasetsFromJSON(jsonString: string): SafeParseResult<GetDatasetByIdDatasets, SDKValidationError>;
/** @internal */
export declare const GetDatasetByIdResponseBody$inboundSchema: z.ZodType<GetDatasetByIdResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDatasetByIdResponseBody$Outbound = {
    datasets_by_pk?: GetDatasetByIdDatasets$Outbound | null | undefined;
};
/** @internal */
export declare const GetDatasetByIdResponseBody$outboundSchema: z.ZodType<GetDatasetByIdResponseBody$Outbound, z.ZodTypeDef, GetDatasetByIdResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDatasetByIdResponseBody$ {
    /** @deprecated use `GetDatasetByIdResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDatasetByIdResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDatasetByIdResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDatasetByIdResponseBody$Outbound, z.ZodTypeDef, GetDatasetByIdResponseBody>;
    /** @deprecated use `GetDatasetByIdResponseBody$Outbound` instead. */
    type Outbound = GetDatasetByIdResponseBody$Outbound;
}
export declare function getDatasetByIdResponseBodyToJSON(getDatasetByIdResponseBody: GetDatasetByIdResponseBody): string;
export declare function getDatasetByIdResponseBodyFromJSON(jsonString: string): SafeParseResult<GetDatasetByIdResponseBody, SDKValidationError>;
/** @internal */
export declare const GetDatasetByIdResponse$inboundSchema: z.ZodType<GetDatasetByIdResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDatasetByIdResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    object?: GetDatasetByIdResponseBody$Outbound | undefined;
};
/** @internal */
export declare const GetDatasetByIdResponse$outboundSchema: z.ZodType<GetDatasetByIdResponse$Outbound, z.ZodTypeDef, GetDatasetByIdResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDatasetByIdResponse$ {
    /** @deprecated use `GetDatasetByIdResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDatasetByIdResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDatasetByIdResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDatasetByIdResponse$Outbound, z.ZodTypeDef, GetDatasetByIdResponse>;
    /** @deprecated use `GetDatasetByIdResponse$Outbound` instead. */
    type Outbound = GetDatasetByIdResponse$Outbound;
}
export declare function getDatasetByIdResponseToJSON(getDatasetByIdResponse: GetDatasetByIdResponse): string;
export declare function getDatasetByIdResponseFromJSON(jsonString: string): SafeParseResult<GetDatasetByIdResponse, SDKValidationError>;
//# sourceMappingURL=getdatasetbyid.d.ts.map