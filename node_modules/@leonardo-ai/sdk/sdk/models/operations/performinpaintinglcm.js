"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.performInpaintingLCMResponseFromJSON = exports.performInpaintingLCMResponseToJSON = exports.PerformInpaintingLCMResponse$ = exports.PerformInpaintingLCMResponse$outboundSchema = exports.PerformInpaintingLCMResponse$inboundSchema = exports.performInpaintingLCMResponseBodyFromJSON = exports.performInpaintingLCMResponseBodyToJSON = exports.PerformInpaintingLCMResponseBody$ = exports.PerformInpaintingLCMResponseBody$outboundSchema = exports.PerformInpaintingLCMResponseBody$inboundSchema = exports.performInpaintingLCMLCMGenerationOutputFromJSON = exports.performInpaintingLCMLCMGenerationOutputToJSON = exports.PerformInpaintingLCMLCMGenerationOutput$ = exports.PerformInpaintingLCMLCMGenerationOutput$outboundSchema = exports.PerformInpaintingLCMLCMGenerationOutput$inboundSchema = exports.performInpaintingLCMRequestBodyFromJSON = exports.performInpaintingLCMRequestBodyToJSON = exports.PerformInpaintingLCMRequestBody$ = exports.PerformInpaintingLCMRequestBody$outboundSchema = exports.PerformInpaintingLCMRequestBody$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/** @internal */
exports.PerformInpaintingLCMRequestBody$inboundSchema = z.object({
    guidance: z.nullable(z.number()).optional(),
    height: z.nullable(z.number().int().default(512)),
    imageDataUrl: z.string(),
    maskDataUrl: z.string(),
    prompt: z.string(),
    requestTimestamp: z.string().optional(),
    seed: z.nullable(z.number().int()).optional(),
    steps: z.nullable(z.number().int()).optional(),
    strength: z.nullable(z.number()).optional(),
    style: z.nullable(shared.LcmGenerationStyle$inboundSchema).optional(),
    width: z.nullable(z.number().int().default(512)),
});
/** @internal */
exports.PerformInpaintingLCMRequestBody$outboundSchema = z.object({
    guidance: z.nullable(z.number()).optional(),
    height: z.nullable(z.number().int().default(512)),
    imageDataUrl: z.string(),
    maskDataUrl: z.string(),
    prompt: z.string(),
    requestTimestamp: z.string().optional(),
    seed: z.nullable(z.number().int()).optional(),
    steps: z.nullable(z.number().int()).optional(),
    strength: z.nullable(z.number()).optional(),
    style: z.nullable(shared.LcmGenerationStyle$outboundSchema).optional(),
    width: z.nullable(z.number().int().default(512)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PerformInpaintingLCMRequestBody$;
(function (PerformInpaintingLCMRequestBody$) {
    /** @deprecated use `PerformInpaintingLCMRequestBody$inboundSchema` instead. */
    PerformInpaintingLCMRequestBody$.inboundSchema = exports.PerformInpaintingLCMRequestBody$inboundSchema;
    /** @deprecated use `PerformInpaintingLCMRequestBody$outboundSchema` instead. */
    PerformInpaintingLCMRequestBody$.outboundSchema = exports.PerformInpaintingLCMRequestBody$outboundSchema;
})(PerformInpaintingLCMRequestBody$ || (exports.PerformInpaintingLCMRequestBody$ = PerformInpaintingLCMRequestBody$ = {}));
function performInpaintingLCMRequestBodyToJSON(performInpaintingLCMRequestBody) {
    return JSON.stringify(exports.PerformInpaintingLCMRequestBody$outboundSchema.parse(performInpaintingLCMRequestBody));
}
exports.performInpaintingLCMRequestBodyToJSON = performInpaintingLCMRequestBodyToJSON;
function performInpaintingLCMRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PerformInpaintingLCMRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PerformInpaintingLCMRequestBody' from JSON`);
}
exports.performInpaintingLCMRequestBodyFromJSON = performInpaintingLCMRequestBodyFromJSON;
/** @internal */
exports.PerformInpaintingLCMLCMGenerationOutput$inboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    imageDataUrl: z.array(z.string()).optional(),
    requestTimestamp: z.string().optional(),
});
/** @internal */
exports.PerformInpaintingLCMLCMGenerationOutput$outboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    imageDataUrl: z.array(z.string()).optional(),
    requestTimestamp: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PerformInpaintingLCMLCMGenerationOutput$;
(function (PerformInpaintingLCMLCMGenerationOutput$) {
    /** @deprecated use `PerformInpaintingLCMLCMGenerationOutput$inboundSchema` instead. */
    PerformInpaintingLCMLCMGenerationOutput$.inboundSchema = exports.PerformInpaintingLCMLCMGenerationOutput$inboundSchema;
    /** @deprecated use `PerformInpaintingLCMLCMGenerationOutput$outboundSchema` instead. */
    PerformInpaintingLCMLCMGenerationOutput$.outboundSchema = exports.PerformInpaintingLCMLCMGenerationOutput$outboundSchema;
})(PerformInpaintingLCMLCMGenerationOutput$ || (exports.PerformInpaintingLCMLCMGenerationOutput$ = PerformInpaintingLCMLCMGenerationOutput$ = {}));
function performInpaintingLCMLCMGenerationOutputToJSON(performInpaintingLCMLCMGenerationOutput) {
    return JSON.stringify(exports.PerformInpaintingLCMLCMGenerationOutput$outboundSchema.parse(performInpaintingLCMLCMGenerationOutput));
}
exports.performInpaintingLCMLCMGenerationOutputToJSON = performInpaintingLCMLCMGenerationOutputToJSON;
function performInpaintingLCMLCMGenerationOutputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PerformInpaintingLCMLCMGenerationOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PerformInpaintingLCMLCMGenerationOutput' from JSON`);
}
exports.performInpaintingLCMLCMGenerationOutputFromJSON = performInpaintingLCMLCMGenerationOutputFromJSON;
/** @internal */
exports.PerformInpaintingLCMResponseBody$inboundSchema = z.object({
    lcmGenerationJob: z.nullable(z.lazy(() => exports.PerformInpaintingLCMLCMGenerationOutput$inboundSchema)).optional(),
});
/** @internal */
exports.PerformInpaintingLCMResponseBody$outboundSchema = z.object({
    lcmGenerationJob: z.nullable(z.lazy(() => exports.PerformInpaintingLCMLCMGenerationOutput$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PerformInpaintingLCMResponseBody$;
(function (PerformInpaintingLCMResponseBody$) {
    /** @deprecated use `PerformInpaintingLCMResponseBody$inboundSchema` instead. */
    PerformInpaintingLCMResponseBody$.inboundSchema = exports.PerformInpaintingLCMResponseBody$inboundSchema;
    /** @deprecated use `PerformInpaintingLCMResponseBody$outboundSchema` instead. */
    PerformInpaintingLCMResponseBody$.outboundSchema = exports.PerformInpaintingLCMResponseBody$outboundSchema;
})(PerformInpaintingLCMResponseBody$ || (exports.PerformInpaintingLCMResponseBody$ = PerformInpaintingLCMResponseBody$ = {}));
function performInpaintingLCMResponseBodyToJSON(performInpaintingLCMResponseBody) {
    return JSON.stringify(exports.PerformInpaintingLCMResponseBody$outboundSchema.parse(performInpaintingLCMResponseBody));
}
exports.performInpaintingLCMResponseBodyToJSON = performInpaintingLCMResponseBodyToJSON;
function performInpaintingLCMResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PerformInpaintingLCMResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PerformInpaintingLCMResponseBody' from JSON`);
}
exports.performInpaintingLCMResponseBodyFromJSON = performInpaintingLCMResponseBodyFromJSON;
/** @internal */
exports.PerformInpaintingLCMResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.PerformInpaintingLCMResponseBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.PerformInpaintingLCMResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.PerformInpaintingLCMResponseBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PerformInpaintingLCMResponse$;
(function (PerformInpaintingLCMResponse$) {
    /** @deprecated use `PerformInpaintingLCMResponse$inboundSchema` instead. */
    PerformInpaintingLCMResponse$.inboundSchema = exports.PerformInpaintingLCMResponse$inboundSchema;
    /** @deprecated use `PerformInpaintingLCMResponse$outboundSchema` instead. */
    PerformInpaintingLCMResponse$.outboundSchema = exports.PerformInpaintingLCMResponse$outboundSchema;
})(PerformInpaintingLCMResponse$ || (exports.PerformInpaintingLCMResponse$ = PerformInpaintingLCMResponse$ = {}));
function performInpaintingLCMResponseToJSON(performInpaintingLCMResponse) {
    return JSON.stringify(exports.PerformInpaintingLCMResponse$outboundSchema.parse(performInpaintingLCMResponse));
}
exports.performInpaintingLCMResponseToJSON = performInpaintingLCMResponseToJSON;
function performInpaintingLCMResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PerformInpaintingLCMResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PerformInpaintingLCMResponse' from JSON`);
}
exports.performInpaintingLCMResponseFromJSON = performInpaintingLCMResponseFromJSON;
//# sourceMappingURL=performinpaintinglcm.js.map