"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteDatasetByIdResponseFromJSON = exports.deleteDatasetByIdResponseToJSON = exports.DeleteDatasetByIdResponse$ = exports.DeleteDatasetByIdResponse$outboundSchema = exports.DeleteDatasetByIdResponse$inboundSchema = exports.deleteDatasetByIdResponseBodyFromJSON = exports.deleteDatasetByIdResponseBodyToJSON = exports.DeleteDatasetByIdResponseBody$ = exports.DeleteDatasetByIdResponseBody$outboundSchema = exports.DeleteDatasetByIdResponseBody$inboundSchema = exports.deleteDatasetByIdDatasetsFromJSON = exports.deleteDatasetByIdDatasetsToJSON = exports.DeleteDatasetByIdDatasets$ = exports.DeleteDatasetByIdDatasets$outboundSchema = exports.DeleteDatasetByIdDatasets$inboundSchema = exports.deleteDatasetByIdRequestFromJSON = exports.deleteDatasetByIdRequestToJSON = exports.DeleteDatasetByIdRequest$ = exports.DeleteDatasetByIdRequest$outboundSchema = exports.DeleteDatasetByIdRequest$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.DeleteDatasetByIdRequest$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
exports.DeleteDatasetByIdRequest$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DeleteDatasetByIdRequest$;
(function (DeleteDatasetByIdRequest$) {
    /** @deprecated use `DeleteDatasetByIdRequest$inboundSchema` instead. */
    DeleteDatasetByIdRequest$.inboundSchema = exports.DeleteDatasetByIdRequest$inboundSchema;
    /** @deprecated use `DeleteDatasetByIdRequest$outboundSchema` instead. */
    DeleteDatasetByIdRequest$.outboundSchema = exports.DeleteDatasetByIdRequest$outboundSchema;
})(DeleteDatasetByIdRequest$ || (exports.DeleteDatasetByIdRequest$ = DeleteDatasetByIdRequest$ = {}));
function deleteDatasetByIdRequestToJSON(deleteDatasetByIdRequest) {
    return JSON.stringify(exports.DeleteDatasetByIdRequest$outboundSchema.parse(deleteDatasetByIdRequest));
}
exports.deleteDatasetByIdRequestToJSON = deleteDatasetByIdRequestToJSON;
function deleteDatasetByIdRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteDatasetByIdRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteDatasetByIdRequest' from JSON`);
}
exports.deleteDatasetByIdRequestFromJSON = deleteDatasetByIdRequestFromJSON;
/** @internal */
exports.DeleteDatasetByIdDatasets$inboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/** @internal */
exports.DeleteDatasetByIdDatasets$outboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DeleteDatasetByIdDatasets$;
(function (DeleteDatasetByIdDatasets$) {
    /** @deprecated use `DeleteDatasetByIdDatasets$inboundSchema` instead. */
    DeleteDatasetByIdDatasets$.inboundSchema = exports.DeleteDatasetByIdDatasets$inboundSchema;
    /** @deprecated use `DeleteDatasetByIdDatasets$outboundSchema` instead. */
    DeleteDatasetByIdDatasets$.outboundSchema = exports.DeleteDatasetByIdDatasets$outboundSchema;
})(DeleteDatasetByIdDatasets$ || (exports.DeleteDatasetByIdDatasets$ = DeleteDatasetByIdDatasets$ = {}));
function deleteDatasetByIdDatasetsToJSON(deleteDatasetByIdDatasets) {
    return JSON.stringify(exports.DeleteDatasetByIdDatasets$outboundSchema.parse(deleteDatasetByIdDatasets));
}
exports.deleteDatasetByIdDatasetsToJSON = deleteDatasetByIdDatasetsToJSON;
function deleteDatasetByIdDatasetsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteDatasetByIdDatasets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteDatasetByIdDatasets' from JSON`);
}
exports.deleteDatasetByIdDatasetsFromJSON = deleteDatasetByIdDatasetsFromJSON;
/** @internal */
exports.DeleteDatasetByIdResponseBody$inboundSchema = z.object({
    delete_datasets_by_pk: z.nullable(z.lazy(() => exports.DeleteDatasetByIdDatasets$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "delete_datasets_by_pk": "deleteDatasetsByPk",
    });
});
/** @internal */
exports.DeleteDatasetByIdResponseBody$outboundSchema = z.object({
    deleteDatasetsByPk: z.nullable(z.lazy(() => exports.DeleteDatasetByIdDatasets$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        deleteDatasetsByPk: "delete_datasets_by_pk",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DeleteDatasetByIdResponseBody$;
(function (DeleteDatasetByIdResponseBody$) {
    /** @deprecated use `DeleteDatasetByIdResponseBody$inboundSchema` instead. */
    DeleteDatasetByIdResponseBody$.inboundSchema = exports.DeleteDatasetByIdResponseBody$inboundSchema;
    /** @deprecated use `DeleteDatasetByIdResponseBody$outboundSchema` instead. */
    DeleteDatasetByIdResponseBody$.outboundSchema = exports.DeleteDatasetByIdResponseBody$outboundSchema;
})(DeleteDatasetByIdResponseBody$ || (exports.DeleteDatasetByIdResponseBody$ = DeleteDatasetByIdResponseBody$ = {}));
function deleteDatasetByIdResponseBodyToJSON(deleteDatasetByIdResponseBody) {
    return JSON.stringify(exports.DeleteDatasetByIdResponseBody$outboundSchema.parse(deleteDatasetByIdResponseBody));
}
exports.deleteDatasetByIdResponseBodyToJSON = deleteDatasetByIdResponseBodyToJSON;
function deleteDatasetByIdResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteDatasetByIdResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteDatasetByIdResponseBody' from JSON`);
}
exports.deleteDatasetByIdResponseBodyFromJSON = deleteDatasetByIdResponseBodyFromJSON;
/** @internal */
exports.DeleteDatasetByIdResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.DeleteDatasetByIdResponseBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.DeleteDatasetByIdResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.DeleteDatasetByIdResponseBody$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DeleteDatasetByIdResponse$;
(function (DeleteDatasetByIdResponse$) {
    /** @deprecated use `DeleteDatasetByIdResponse$inboundSchema` instead. */
    DeleteDatasetByIdResponse$.inboundSchema = exports.DeleteDatasetByIdResponse$inboundSchema;
    /** @deprecated use `DeleteDatasetByIdResponse$outboundSchema` instead. */
    DeleteDatasetByIdResponse$.outboundSchema = exports.DeleteDatasetByIdResponse$outboundSchema;
})(DeleteDatasetByIdResponse$ || (exports.DeleteDatasetByIdResponse$ = DeleteDatasetByIdResponse$ = {}));
function deleteDatasetByIdResponseToJSON(deleteDatasetByIdResponse) {
    return JSON.stringify(exports.DeleteDatasetByIdResponse$outboundSchema.parse(deleteDatasetByIdResponse));
}
exports.deleteDatasetByIdResponseToJSON = deleteDatasetByIdResponseToJSON;
function deleteDatasetByIdResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteDatasetByIdResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteDatasetByIdResponse' from JSON`);
}
exports.deleteDatasetByIdResponseFromJSON = deleteDatasetByIdResponseFromJSON;
//# sourceMappingURL=deletedatasetbyid.js.map