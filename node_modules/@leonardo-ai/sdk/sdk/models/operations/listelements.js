"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listElementsResponseFromJSON = exports.listElementsResponseToJSON = exports.ListElementsResponse$ = exports.ListElementsResponse$outboundSchema = exports.ListElementsResponse$inboundSchema = exports.listElementsResponseBodyFromJSON = exports.listElementsResponseBodyToJSON = exports.ListElementsResponseBody$ = exports.ListElementsResponseBody$outboundSchema = exports.ListElementsResponseBody$inboundSchema = exports.lorasFromJSON = exports.lorasToJSON = exports.Loras$ = exports.Loras$outboundSchema = exports.Loras$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/** @internal */
exports.Loras$inboundSchema = z
    .object({
    akUUID: z.nullable(z.string()).optional(),
    baseModel: shared.SdVersions$inboundSchema.optional(),
    creatorName: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    urlImage: z.nullable(z.string()).optional(),
    weightDefault: z.nullable(z.number().int()).optional(),
    weightMax: z.nullable(z.number().int()).optional(),
    weightMin: z.nullable(z.number().int()).optional(),
});
/** @internal */
exports.Loras$outboundSchema = z.object({
    akUUID: z.nullable(z.string()).optional(),
    baseModel: shared.SdVersions$outboundSchema.optional(),
    creatorName: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    urlImage: z.nullable(z.string()).optional(),
    weightDefault: z.nullable(z.number().int()).optional(),
    weightMax: z.nullable(z.number().int()).optional(),
    weightMin: z.nullable(z.number().int()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Loras$;
(function (Loras$) {
    /** @deprecated use `Loras$inboundSchema` instead. */
    Loras$.inboundSchema = exports.Loras$inboundSchema;
    /** @deprecated use `Loras$outboundSchema` instead. */
    Loras$.outboundSchema = exports.Loras$outboundSchema;
})(Loras$ || (exports.Loras$ = Loras$ = {}));
function lorasToJSON(loras) {
    return JSON.stringify(exports.Loras$outboundSchema.parse(loras));
}
exports.lorasToJSON = lorasToJSON;
function lorasFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Loras$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Loras' from JSON`);
}
exports.lorasFromJSON = lorasFromJSON;
/** @internal */
exports.ListElementsResponseBody$inboundSchema = z.object({
    loras: z.array(z.lazy(() => exports.Loras$inboundSchema)).optional(),
});
/** @internal */
exports.ListElementsResponseBody$outboundSchema = z.object({
    loras: z.array(z.lazy(() => exports.Loras$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListElementsResponseBody$;
(function (ListElementsResponseBody$) {
    /** @deprecated use `ListElementsResponseBody$inboundSchema` instead. */
    ListElementsResponseBody$.inboundSchema = exports.ListElementsResponseBody$inboundSchema;
    /** @deprecated use `ListElementsResponseBody$outboundSchema` instead. */
    ListElementsResponseBody$.outboundSchema = exports.ListElementsResponseBody$outboundSchema;
})(ListElementsResponseBody$ || (exports.ListElementsResponseBody$ = ListElementsResponseBody$ = {}));
function listElementsResponseBodyToJSON(listElementsResponseBody) {
    return JSON.stringify(exports.ListElementsResponseBody$outboundSchema.parse(listElementsResponseBody));
}
exports.listElementsResponseBodyToJSON = listElementsResponseBodyToJSON;
function listElementsResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListElementsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListElementsResponseBody' from JSON`);
}
exports.listElementsResponseBodyFromJSON = listElementsResponseBodyFromJSON;
/** @internal */
exports.ListElementsResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.ListElementsResponseBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.ListElementsResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.ListElementsResponseBody$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListElementsResponse$;
(function (ListElementsResponse$) {
    /** @deprecated use `ListElementsResponse$inboundSchema` instead. */
    ListElementsResponse$.inboundSchema = exports.ListElementsResponse$inboundSchema;
    /** @deprecated use `ListElementsResponse$outboundSchema` instead. */
    ListElementsResponse$.outboundSchema = exports.ListElementsResponse$outboundSchema;
})(ListElementsResponse$ || (exports.ListElementsResponse$ = ListElementsResponse$ = {}));
function listElementsResponseToJSON(listElementsResponse) {
    return JSON.stringify(exports.ListElementsResponse$outboundSchema.parse(listElementsResponse));
}
exports.listElementsResponseToJSON = listElementsResponseToJSON;
function listElementsResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListElementsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListElementsResponse' from JSON`);
}
exports.listElementsResponseFromJSON = listElementsResponseFromJSON;
//# sourceMappingURL=listelements.js.map