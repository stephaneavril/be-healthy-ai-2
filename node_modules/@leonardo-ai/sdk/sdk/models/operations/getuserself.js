"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserSelfResponseFromJSON = exports.getUserSelfResponseToJSON = exports.GetUserSelfResponse$ = exports.GetUserSelfResponse$outboundSchema = exports.GetUserSelfResponse$inboundSchema = exports.getUserSelfResponseBodyFromJSON = exports.getUserSelfResponseBodyToJSON = exports.GetUserSelfResponseBody$ = exports.GetUserSelfResponseBody$outboundSchema = exports.GetUserSelfResponseBody$inboundSchema = exports.userDetailsFromJSON = exports.userDetailsToJSON = exports.UserDetails$ = exports.UserDetails$outboundSchema = exports.UserDetails$inboundSchema = exports.usersFromJSON = exports.usersToJSON = exports.Users$ = exports.Users$outboundSchema = exports.Users$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.Users$inboundSchema = z
    .object({
    id: z.nullable(z.string()).optional(),
    username: z.nullable(z.string()).optional(),
});
/** @internal */
exports.Users$outboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
    username: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Users$;
(function (Users$) {
    /** @deprecated use `Users$inboundSchema` instead. */
    Users$.inboundSchema = exports.Users$inboundSchema;
    /** @deprecated use `Users$outboundSchema` instead. */
    Users$.outboundSchema = exports.Users$outboundSchema;
})(Users$ || (exports.Users$ = Users$ = {}));
function usersToJSON(users) {
    return JSON.stringify(exports.Users$outboundSchema.parse(users));
}
exports.usersToJSON = usersToJSON;
function usersFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Users$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Users' from JSON`);
}
exports.usersFromJSON = usersFromJSON;
/** @internal */
exports.UserDetails$inboundSchema = z.object({
    apiConcurrencySlots: z.number().int().optional(),
    apiPaidTokens: z.nullable(z.number().int()).optional(),
    apiPlanTokenRenewalDate: z.nullable(z.string()).optional(),
    apiSubscriptionTokens: z.number().int().optional(),
    paidTokens: z.nullable(z.number().int()).optional(),
    subscriptionGptTokens: z.number().int().optional(),
    subscriptionModelTokens: z.number().int().optional(),
    subscriptionTokens: z.number().int().optional(),
    tokenRenewalDate: z.nullable(z.string()).optional(),
    user: z.nullable(z.lazy(() => exports.Users$inboundSchema)).optional(),
});
/** @internal */
exports.UserDetails$outboundSchema = z.object({
    apiConcurrencySlots: z.number().int().optional(),
    apiPaidTokens: z.nullable(z.number().int()).optional(),
    apiPlanTokenRenewalDate: z.nullable(z.string()).optional(),
    apiSubscriptionTokens: z.number().int().optional(),
    paidTokens: z.nullable(z.number().int()).optional(),
    subscriptionGptTokens: z.number().int().optional(),
    subscriptionModelTokens: z.number().int().optional(),
    subscriptionTokens: z.number().int().optional(),
    tokenRenewalDate: z.nullable(z.string()).optional(),
    user: z.nullable(z.lazy(() => exports.Users$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UserDetails$;
(function (UserDetails$) {
    /** @deprecated use `UserDetails$inboundSchema` instead. */
    UserDetails$.inboundSchema = exports.UserDetails$inboundSchema;
    /** @deprecated use `UserDetails$outboundSchema` instead. */
    UserDetails$.outboundSchema = exports.UserDetails$outboundSchema;
})(UserDetails$ || (exports.UserDetails$ = UserDetails$ = {}));
function userDetailsToJSON(userDetails) {
    return JSON.stringify(exports.UserDetails$outboundSchema.parse(userDetails));
}
exports.userDetailsToJSON = userDetailsToJSON;
function userDetailsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UserDetails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserDetails' from JSON`);
}
exports.userDetailsFromJSON = userDetailsFromJSON;
/** @internal */
exports.GetUserSelfResponseBody$inboundSchema = z.object({
    user_details: z.array(z.lazy(() => exports.UserDetails$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "user_details": "userDetails",
    });
});
/** @internal */
exports.GetUserSelfResponseBody$outboundSchema = z.object({
    userDetails: z.array(z.lazy(() => exports.UserDetails$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        userDetails: "user_details",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetUserSelfResponseBody$;
(function (GetUserSelfResponseBody$) {
    /** @deprecated use `GetUserSelfResponseBody$inboundSchema` instead. */
    GetUserSelfResponseBody$.inboundSchema = exports.GetUserSelfResponseBody$inboundSchema;
    /** @deprecated use `GetUserSelfResponseBody$outboundSchema` instead. */
    GetUserSelfResponseBody$.outboundSchema = exports.GetUserSelfResponseBody$outboundSchema;
})(GetUserSelfResponseBody$ || (exports.GetUserSelfResponseBody$ = GetUserSelfResponseBody$ = {}));
function getUserSelfResponseBodyToJSON(getUserSelfResponseBody) {
    return JSON.stringify(exports.GetUserSelfResponseBody$outboundSchema.parse(getUserSelfResponseBody));
}
exports.getUserSelfResponseBodyToJSON = getUserSelfResponseBodyToJSON;
function getUserSelfResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetUserSelfResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetUserSelfResponseBody' from JSON`);
}
exports.getUserSelfResponseBodyFromJSON = getUserSelfResponseBodyFromJSON;
/** @internal */
exports.GetUserSelfResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.GetUserSelfResponseBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.GetUserSelfResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.GetUserSelfResponseBody$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetUserSelfResponse$;
(function (GetUserSelfResponse$) {
    /** @deprecated use `GetUserSelfResponse$inboundSchema` instead. */
    GetUserSelfResponse$.inboundSchema = exports.GetUserSelfResponse$inboundSchema;
    /** @deprecated use `GetUserSelfResponse$outboundSchema` instead. */
    GetUserSelfResponse$.outboundSchema = exports.GetUserSelfResponse$outboundSchema;
})(GetUserSelfResponse$ || (exports.GetUserSelfResponse$ = GetUserSelfResponse$ = {}));
function getUserSelfResponseToJSON(getUserSelfResponse) {
    return JSON.stringify(exports.GetUserSelfResponse$outboundSchema.parse(getUserSelfResponse));
}
exports.getUserSelfResponseToJSON = getUserSelfResponseToJSON;
function getUserSelfResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetUserSelfResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetUserSelfResponse' from JSON`);
}
exports.getUserSelfResponseFromJSON = getUserSelfResponseFromJSON;
//# sourceMappingURL=getuserself.js.map