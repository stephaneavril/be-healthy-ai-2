"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGenerationByIdResponseFromJSON = exports.getGenerationByIdResponseToJSON = exports.GetGenerationByIdResponse$ = exports.GetGenerationByIdResponse$outboundSchema = exports.GetGenerationByIdResponse$inboundSchema = exports.getGenerationByIdResponseBodyFromJSON = exports.getGenerationByIdResponseBodyToJSON = exports.GetGenerationByIdResponseBody$ = exports.GetGenerationByIdResponseBody$outboundSchema = exports.GetGenerationByIdResponseBody$inboundSchema = exports.getGenerationByIdGenerationsFromJSON = exports.getGenerationByIdGenerationsToJSON = exports.GetGenerationByIdGenerations$ = exports.GetGenerationByIdGenerations$outboundSchema = exports.GetGenerationByIdGenerations$inboundSchema = exports.generationElementsFromJSON = exports.generationElementsToJSON = exports.GenerationElements$ = exports.GenerationElements$outboundSchema = exports.GenerationElements$inboundSchema = exports.getGenerationByIdLorasFromJSON = exports.getGenerationByIdLorasToJSON = exports.GetGenerationByIdLoras$ = exports.GetGenerationByIdLoras$outboundSchema = exports.GetGenerationByIdLoras$inboundSchema = exports.generatedImagesFromJSON = exports.generatedImagesToJSON = exports.GeneratedImages$ = exports.GeneratedImages$outboundSchema = exports.GeneratedImages$inboundSchema = exports.getGenerationByIdGeneratedImageVariationGenericFromJSON = exports.getGenerationByIdGeneratedImageVariationGenericToJSON = exports.GetGenerationByIdGeneratedImageVariationGeneric$ = exports.GetGenerationByIdGeneratedImageVariationGeneric$outboundSchema = exports.GetGenerationByIdGeneratedImageVariationGeneric$inboundSchema = exports.getGenerationByIdRequestFromJSON = exports.getGenerationByIdRequestToJSON = exports.GetGenerationByIdRequest$ = exports.GetGenerationByIdRequest$outboundSchema = exports.GetGenerationByIdRequest$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/** @internal */
exports.GetGenerationByIdRequest$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
exports.GetGenerationByIdRequest$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetGenerationByIdRequest$;
(function (GetGenerationByIdRequest$) {
    /** @deprecated use `GetGenerationByIdRequest$inboundSchema` instead. */
    GetGenerationByIdRequest$.inboundSchema = exports.GetGenerationByIdRequest$inboundSchema;
    /** @deprecated use `GetGenerationByIdRequest$outboundSchema` instead. */
    GetGenerationByIdRequest$.outboundSchema = exports.GetGenerationByIdRequest$outboundSchema;
})(GetGenerationByIdRequest$ || (exports.GetGenerationByIdRequest$ = GetGenerationByIdRequest$ = {}));
function getGenerationByIdRequestToJSON(getGenerationByIdRequest) {
    return JSON.stringify(exports.GetGenerationByIdRequest$outboundSchema.parse(getGenerationByIdRequest));
}
exports.getGenerationByIdRequestToJSON = getGenerationByIdRequestToJSON;
function getGenerationByIdRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetGenerationByIdRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetGenerationByIdRequest' from JSON`);
}
exports.getGenerationByIdRequestFromJSON = getGenerationByIdRequestFromJSON;
/** @internal */
exports.GetGenerationByIdGeneratedImageVariationGeneric$inboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
    status: shared.JobStatus$inboundSchema.optional(),
    transformType: shared.VariationType$inboundSchema.optional(),
    url: z.nullable(z.string()).optional(),
});
/** @internal */
exports.GetGenerationByIdGeneratedImageVariationGeneric$outboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
    status: shared.JobStatus$outboundSchema.optional(),
    transformType: shared.VariationType$outboundSchema.optional(),
    url: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetGenerationByIdGeneratedImageVariationGeneric$;
(function (GetGenerationByIdGeneratedImageVariationGeneric$) {
    /** @deprecated use `GetGenerationByIdGeneratedImageVariationGeneric$inboundSchema` instead. */
    GetGenerationByIdGeneratedImageVariationGeneric$.inboundSchema = exports.GetGenerationByIdGeneratedImageVariationGeneric$inboundSchema;
    /** @deprecated use `GetGenerationByIdGeneratedImageVariationGeneric$outboundSchema` instead. */
    GetGenerationByIdGeneratedImageVariationGeneric$.outboundSchema = exports.GetGenerationByIdGeneratedImageVariationGeneric$outboundSchema;
})(GetGenerationByIdGeneratedImageVariationGeneric$ || (exports.GetGenerationByIdGeneratedImageVariationGeneric$ = GetGenerationByIdGeneratedImageVariationGeneric$ = {}));
function getGenerationByIdGeneratedImageVariationGenericToJSON(getGenerationByIdGeneratedImageVariationGeneric) {
    return JSON.stringify(exports.GetGenerationByIdGeneratedImageVariationGeneric$outboundSchema.parse(getGenerationByIdGeneratedImageVariationGeneric));
}
exports.getGenerationByIdGeneratedImageVariationGenericToJSON = getGenerationByIdGeneratedImageVariationGenericToJSON;
function getGenerationByIdGeneratedImageVariationGenericFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetGenerationByIdGeneratedImageVariationGeneric$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetGenerationByIdGeneratedImageVariationGeneric' from JSON`);
}
exports.getGenerationByIdGeneratedImageVariationGenericFromJSON = getGenerationByIdGeneratedImageVariationGenericFromJSON;
/** @internal */
exports.GeneratedImages$inboundSchema = z.object({
    fantasyAvatar: z.nullable(z.boolean()).optional(),
    generated_image_variation_generics: z.array(z.lazy(() => exports.GetGenerationByIdGeneratedImageVariationGeneric$inboundSchema)).optional(),
    id: z.nullable(z.string()).optional(),
    imageToVideo: z.nullable(z.boolean()).optional(),
    likeCount: z.number().int().optional(),
    motion: z.nullable(z.boolean()).optional(),
    motionMP4URL: z.nullable(z.string()).optional(),
    motionModel: z.nullable(z.string()).optional(),
    motionStrength: z.nullable(z.number().int()).optional(),
    nsfw: z.boolean().optional(),
    url: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "generated_image_variation_generics": "generatedImageVariationGenerics",
        "motionMP4URL": "motionMp4URL",
    });
});
/** @internal */
exports.GeneratedImages$outboundSchema = z.object({
    fantasyAvatar: z.nullable(z.boolean()).optional(),
    generatedImageVariationGenerics: z.array(z.lazy(() => exports.GetGenerationByIdGeneratedImageVariationGeneric$outboundSchema)).optional(),
    id: z.nullable(z.string()).optional(),
    imageToVideo: z.nullable(z.boolean()).optional(),
    likeCount: z.number().int().optional(),
    motion: z.nullable(z.boolean()).optional(),
    motionMp4URL: z.nullable(z.string()).optional(),
    motionModel: z.nullable(z.string()).optional(),
    motionStrength: z.nullable(z.number().int()).optional(),
    nsfw: z.boolean().optional(),
    url: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        generatedImageVariationGenerics: "generated_image_variation_generics",
        motionMp4URL: "motionMP4URL",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GeneratedImages$;
(function (GeneratedImages$) {
    /** @deprecated use `GeneratedImages$inboundSchema` instead. */
    GeneratedImages$.inboundSchema = exports.GeneratedImages$inboundSchema;
    /** @deprecated use `GeneratedImages$outboundSchema` instead. */
    GeneratedImages$.outboundSchema = exports.GeneratedImages$outboundSchema;
})(GeneratedImages$ || (exports.GeneratedImages$ = GeneratedImages$ = {}));
function generatedImagesToJSON(generatedImages) {
    return JSON.stringify(exports.GeneratedImages$outboundSchema.parse(generatedImages));
}
exports.generatedImagesToJSON = generatedImagesToJSON;
function generatedImagesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GeneratedImages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GeneratedImages' from JSON`);
}
exports.generatedImagesFromJSON = generatedImagesFromJSON;
/** @internal */
exports.GetGenerationByIdLoras$inboundSchema = z.object({
    akUUID: z.nullable(z.string()).optional(),
    baseModel: shared.SdVersions$inboundSchema.optional(),
    description: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    urlImage: z.nullable(z.string()).optional(),
    weightDefault: z.nullable(z.number().int()).optional(),
    weightMax: z.nullable(z.number().int()).optional(),
    weightMin: z.nullable(z.number().int()).optional(),
});
/** @internal */
exports.GetGenerationByIdLoras$outboundSchema = z.object({
    akUUID: z.nullable(z.string()).optional(),
    baseModel: shared.SdVersions$outboundSchema.optional(),
    description: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    urlImage: z.nullable(z.string()).optional(),
    weightDefault: z.nullable(z.number().int()).optional(),
    weightMax: z.nullable(z.number().int()).optional(),
    weightMin: z.nullable(z.number().int()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetGenerationByIdLoras$;
(function (GetGenerationByIdLoras$) {
    /** @deprecated use `GetGenerationByIdLoras$inboundSchema` instead. */
    GetGenerationByIdLoras$.inboundSchema = exports.GetGenerationByIdLoras$inboundSchema;
    /** @deprecated use `GetGenerationByIdLoras$outboundSchema` instead. */
    GetGenerationByIdLoras$.outboundSchema = exports.GetGenerationByIdLoras$outboundSchema;
})(GetGenerationByIdLoras$ || (exports.GetGenerationByIdLoras$ = GetGenerationByIdLoras$ = {}));
function getGenerationByIdLorasToJSON(getGenerationByIdLoras) {
    return JSON.stringify(exports.GetGenerationByIdLoras$outboundSchema.parse(getGenerationByIdLoras));
}
exports.getGenerationByIdLorasToJSON = getGenerationByIdLorasToJSON;
function getGenerationByIdLorasFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetGenerationByIdLoras$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetGenerationByIdLoras' from JSON`);
}
exports.getGenerationByIdLorasFromJSON = getGenerationByIdLorasFromJSON;
/** @internal */
exports.GenerationElements$inboundSchema = z.object({
    id: z.nullable(z.number().int()).optional(),
    lora: z.nullable(z.lazy(() => exports.GetGenerationByIdLoras$inboundSchema))
        .optional(),
    weightApplied: z.nullable(z.number()).optional(),
});
/** @internal */
exports.GenerationElements$outboundSchema = z.object({
    id: z.nullable(z.number().int()).optional(),
    lora: z.nullable(z.lazy(() => exports.GetGenerationByIdLoras$outboundSchema))
        .optional(),
    weightApplied: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GenerationElements$;
(function (GenerationElements$) {
    /** @deprecated use `GenerationElements$inboundSchema` instead. */
    GenerationElements$.inboundSchema = exports.GenerationElements$inboundSchema;
    /** @deprecated use `GenerationElements$outboundSchema` instead. */
    GenerationElements$.outboundSchema = exports.GenerationElements$outboundSchema;
})(GenerationElements$ || (exports.GenerationElements$ = GenerationElements$ = {}));
function generationElementsToJSON(generationElements) {
    return JSON.stringify(exports.GenerationElements$outboundSchema.parse(generationElements));
}
exports.generationElementsToJSON = generationElementsToJSON;
function generationElementsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GenerationElements$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GenerationElements' from JSON`);
}
exports.generationElementsFromJSON = generationElementsFromJSON;
/** @internal */
exports.GetGenerationByIdGenerations$inboundSchema = z.object({
    createdAt: z.string().optional(),
    generated_images: z.array(z.lazy(() => exports.GeneratedImages$inboundSchema))
        .optional(),
    generation_elements: z.array(z.lazy(() => exports.GenerationElements$inboundSchema))
        .optional(),
    guidanceScale: z.nullable(z.number()).optional(),
    id: z.nullable(z.string()).optional(),
    imageHeight: z.number().int().optional(),
    imageWidth: z.number().int().optional(),
    inferenceSteps: z.nullable(z.number().int()).optional(),
    initStrength: z.nullable(z.number()).optional(),
    modelId: z.nullable(z.string()).optional(),
    negativePrompt: z.nullable(z.string()).optional(),
    photoReal: z.nullable(z.boolean()).optional(),
    photoRealStrength: z.nullable(z.number()).optional(),
    presetStyle: z.nullable(shared.SdGenerationStyle$inboundSchema.default(shared.SdGenerationStyle.Dynamic)),
    prompt: z.string().optional(),
    promptMagic: z.nullable(z.boolean()).optional(),
    promptMagicStrength: z.nullable(z.number()).optional(),
    promptMagicVersion: z.nullable(z.string()).optional(),
    public: z.boolean().optional(),
    scheduler: shared.SdGenerationSchedulers$inboundSchema.optional(),
    sdVersion: shared.SdVersions$inboundSchema.optional(),
    seed: z.nullable(z.number().int()).optional(),
    status: shared.JobStatus$inboundSchema.optional(),
    ultra: z.nullable(z.boolean()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "generated_images": "generatedImages",
        "generation_elements": "generationElements",
    });
});
/** @internal */
exports.GetGenerationByIdGenerations$outboundSchema = z.object({
    createdAt: z.string().optional(),
    generatedImages: z.array(z.lazy(() => exports.GeneratedImages$outboundSchema))
        .optional(),
    generationElements: z.array(z.lazy(() => exports.GenerationElements$outboundSchema))
        .optional(),
    guidanceScale: z.nullable(z.number()).optional(),
    id: z.nullable(z.string()).optional(),
    imageHeight: z.number().int().optional(),
    imageWidth: z.number().int().optional(),
    inferenceSteps: z.nullable(z.number().int()).optional(),
    initStrength: z.nullable(z.number()).optional(),
    modelId: z.nullable(z.string()).optional(),
    negativePrompt: z.nullable(z.string()).optional(),
    photoReal: z.nullable(z.boolean()).optional(),
    photoRealStrength: z.nullable(z.number()).optional(),
    presetStyle: z.nullable(shared.SdGenerationStyle$outboundSchema.default(shared.SdGenerationStyle.Dynamic)),
    prompt: z.string().optional(),
    promptMagic: z.nullable(z.boolean()).optional(),
    promptMagicStrength: z.nullable(z.number()).optional(),
    promptMagicVersion: z.nullable(z.string()).optional(),
    public: z.boolean().optional(),
    scheduler: shared.SdGenerationSchedulers$outboundSchema.optional(),
    sdVersion: shared.SdVersions$outboundSchema.optional(),
    seed: z.nullable(z.number().int()).optional(),
    status: shared.JobStatus$outboundSchema.optional(),
    ultra: z.nullable(z.boolean()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        generatedImages: "generated_images",
        generationElements: "generation_elements",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetGenerationByIdGenerations$;
(function (GetGenerationByIdGenerations$) {
    /** @deprecated use `GetGenerationByIdGenerations$inboundSchema` instead. */
    GetGenerationByIdGenerations$.inboundSchema = exports.GetGenerationByIdGenerations$inboundSchema;
    /** @deprecated use `GetGenerationByIdGenerations$outboundSchema` instead. */
    GetGenerationByIdGenerations$.outboundSchema = exports.GetGenerationByIdGenerations$outboundSchema;
})(GetGenerationByIdGenerations$ || (exports.GetGenerationByIdGenerations$ = GetGenerationByIdGenerations$ = {}));
function getGenerationByIdGenerationsToJSON(getGenerationByIdGenerations) {
    return JSON.stringify(exports.GetGenerationByIdGenerations$outboundSchema.parse(getGenerationByIdGenerations));
}
exports.getGenerationByIdGenerationsToJSON = getGenerationByIdGenerationsToJSON;
function getGenerationByIdGenerationsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetGenerationByIdGenerations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetGenerationByIdGenerations' from JSON`);
}
exports.getGenerationByIdGenerationsFromJSON = getGenerationByIdGenerationsFromJSON;
/** @internal */
exports.GetGenerationByIdResponseBody$inboundSchema = z.object({
    generations_by_pk: z.nullable(z.lazy(() => exports.GetGenerationByIdGenerations$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "generations_by_pk": "generationsByPk",
    });
});
/** @internal */
exports.GetGenerationByIdResponseBody$outboundSchema = z.object({
    generationsByPk: z.nullable(z.lazy(() => exports.GetGenerationByIdGenerations$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        generationsByPk: "generations_by_pk",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetGenerationByIdResponseBody$;
(function (GetGenerationByIdResponseBody$) {
    /** @deprecated use `GetGenerationByIdResponseBody$inboundSchema` instead. */
    GetGenerationByIdResponseBody$.inboundSchema = exports.GetGenerationByIdResponseBody$inboundSchema;
    /** @deprecated use `GetGenerationByIdResponseBody$outboundSchema` instead. */
    GetGenerationByIdResponseBody$.outboundSchema = exports.GetGenerationByIdResponseBody$outboundSchema;
})(GetGenerationByIdResponseBody$ || (exports.GetGenerationByIdResponseBody$ = GetGenerationByIdResponseBody$ = {}));
function getGenerationByIdResponseBodyToJSON(getGenerationByIdResponseBody) {
    return JSON.stringify(exports.GetGenerationByIdResponseBody$outboundSchema.parse(getGenerationByIdResponseBody));
}
exports.getGenerationByIdResponseBodyToJSON = getGenerationByIdResponseBodyToJSON;
function getGenerationByIdResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetGenerationByIdResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetGenerationByIdResponseBody' from JSON`);
}
exports.getGenerationByIdResponseBodyFromJSON = getGenerationByIdResponseBodyFromJSON;
/** @internal */
exports.GetGenerationByIdResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.GetGenerationByIdResponseBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.GetGenerationByIdResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.GetGenerationByIdResponseBody$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetGenerationByIdResponse$;
(function (GetGenerationByIdResponse$) {
    /** @deprecated use `GetGenerationByIdResponse$inboundSchema` instead. */
    GetGenerationByIdResponse$.inboundSchema = exports.GetGenerationByIdResponse$inboundSchema;
    /** @deprecated use `GetGenerationByIdResponse$outboundSchema` instead. */
    GetGenerationByIdResponse$.outboundSchema = exports.GetGenerationByIdResponse$outboundSchema;
})(GetGenerationByIdResponse$ || (exports.GetGenerationByIdResponse$ = GetGenerationByIdResponse$ = {}));
function getGenerationByIdResponseToJSON(getGenerationByIdResponse) {
    return JSON.stringify(exports.GetGenerationByIdResponse$outboundSchema.parse(getGenerationByIdResponse));
}
exports.getGenerationByIdResponseToJSON = getGenerationByIdResponseToJSON;
function getGenerationByIdResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetGenerationByIdResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetGenerationByIdResponse' from JSON`);
}
exports.getGenerationByIdResponseFromJSON = getGenerationByIdResponseFromJSON;
//# sourceMappingURL=getgenerationbyid.js.map