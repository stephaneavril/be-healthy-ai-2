"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadDatasetImageResponseFromJSON = exports.uploadDatasetImageResponseToJSON = exports.UploadDatasetImageResponse$ = exports.UploadDatasetImageResponse$outboundSchema = exports.UploadDatasetImageResponse$inboundSchema = exports.uploadDatasetImageResponseBodyFromJSON = exports.uploadDatasetImageResponseBodyToJSON = exports.UploadDatasetImageResponseBody$ = exports.UploadDatasetImageResponseBody$outboundSchema = exports.UploadDatasetImageResponseBody$inboundSchema = exports.datasetUploadOutputFromJSON = exports.datasetUploadOutputToJSON = exports.DatasetUploadOutput$ = exports.DatasetUploadOutput$outboundSchema = exports.DatasetUploadOutput$inboundSchema = exports.uploadDatasetImageRequestFromJSON = exports.uploadDatasetImageRequestToJSON = exports.UploadDatasetImageRequest$ = exports.UploadDatasetImageRequest$outboundSchema = exports.UploadDatasetImageRequest$inboundSchema = exports.uploadDatasetImageRequestBodyFromJSON = exports.uploadDatasetImageRequestBodyToJSON = exports.UploadDatasetImageRequestBody$ = exports.UploadDatasetImageRequestBody$outboundSchema = exports.UploadDatasetImageRequestBody$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.UploadDatasetImageRequestBody$inboundSchema = z.object({
    extension: z.string(),
});
/** @internal */
exports.UploadDatasetImageRequestBody$outboundSchema = z.object({
    extension: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadDatasetImageRequestBody$;
(function (UploadDatasetImageRequestBody$) {
    /** @deprecated use `UploadDatasetImageRequestBody$inboundSchema` instead. */
    UploadDatasetImageRequestBody$.inboundSchema = exports.UploadDatasetImageRequestBody$inboundSchema;
    /** @deprecated use `UploadDatasetImageRequestBody$outboundSchema` instead. */
    UploadDatasetImageRequestBody$.outboundSchema = exports.UploadDatasetImageRequestBody$outboundSchema;
})(UploadDatasetImageRequestBody$ || (exports.UploadDatasetImageRequestBody$ = UploadDatasetImageRequestBody$ = {}));
function uploadDatasetImageRequestBodyToJSON(uploadDatasetImageRequestBody) {
    return JSON.stringify(exports.UploadDatasetImageRequestBody$outboundSchema.parse(uploadDatasetImageRequestBody));
}
exports.uploadDatasetImageRequestBodyToJSON = uploadDatasetImageRequestBodyToJSON;
function uploadDatasetImageRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadDatasetImageRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadDatasetImageRequestBody' from JSON`);
}
exports.uploadDatasetImageRequestBodyFromJSON = uploadDatasetImageRequestBodyFromJSON;
/** @internal */
exports.UploadDatasetImageRequest$inboundSchema = z.object({
    RequestBody: z.lazy(() => exports.UploadDatasetImageRequestBody$inboundSchema),
    datasetId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
exports.UploadDatasetImageRequest$outboundSchema = z.object({
    requestBody: z.lazy(() => exports.UploadDatasetImageRequestBody$outboundSchema),
    datasetId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadDatasetImageRequest$;
(function (UploadDatasetImageRequest$) {
    /** @deprecated use `UploadDatasetImageRequest$inboundSchema` instead. */
    UploadDatasetImageRequest$.inboundSchema = exports.UploadDatasetImageRequest$inboundSchema;
    /** @deprecated use `UploadDatasetImageRequest$outboundSchema` instead. */
    UploadDatasetImageRequest$.outboundSchema = exports.UploadDatasetImageRequest$outboundSchema;
})(UploadDatasetImageRequest$ || (exports.UploadDatasetImageRequest$ = UploadDatasetImageRequest$ = {}));
function uploadDatasetImageRequestToJSON(uploadDatasetImageRequest) {
    return JSON.stringify(exports.UploadDatasetImageRequest$outboundSchema.parse(uploadDatasetImageRequest));
}
exports.uploadDatasetImageRequestToJSON = uploadDatasetImageRequestToJSON;
function uploadDatasetImageRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadDatasetImageRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadDatasetImageRequest' from JSON`);
}
exports.uploadDatasetImageRequestFromJSON = uploadDatasetImageRequestFromJSON;
/** @internal */
exports.DatasetUploadOutput$inboundSchema = z.object({
    fields: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    key: z.nullable(z.string()).optional(),
    url: z.nullable(z.string()).optional(),
});
/** @internal */
exports.DatasetUploadOutput$outboundSchema = z.object({
    fields: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    key: z.nullable(z.string()).optional(),
    url: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DatasetUploadOutput$;
(function (DatasetUploadOutput$) {
    /** @deprecated use `DatasetUploadOutput$inboundSchema` instead. */
    DatasetUploadOutput$.inboundSchema = exports.DatasetUploadOutput$inboundSchema;
    /** @deprecated use `DatasetUploadOutput$outboundSchema` instead. */
    DatasetUploadOutput$.outboundSchema = exports.DatasetUploadOutput$outboundSchema;
})(DatasetUploadOutput$ || (exports.DatasetUploadOutput$ = DatasetUploadOutput$ = {}));
function datasetUploadOutputToJSON(datasetUploadOutput) {
    return JSON.stringify(exports.DatasetUploadOutput$outboundSchema.parse(datasetUploadOutput));
}
exports.datasetUploadOutputToJSON = datasetUploadOutputToJSON;
function datasetUploadOutputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DatasetUploadOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DatasetUploadOutput' from JSON`);
}
exports.datasetUploadOutputFromJSON = datasetUploadOutputFromJSON;
/** @internal */
exports.UploadDatasetImageResponseBody$inboundSchema = z.object({
    uploadDatasetImage: z.nullable(z.lazy(() => exports.DatasetUploadOutput$inboundSchema)).optional(),
});
/** @internal */
exports.UploadDatasetImageResponseBody$outboundSchema = z.object({
    uploadDatasetImage: z.nullable(z.lazy(() => exports.DatasetUploadOutput$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadDatasetImageResponseBody$;
(function (UploadDatasetImageResponseBody$) {
    /** @deprecated use `UploadDatasetImageResponseBody$inboundSchema` instead. */
    UploadDatasetImageResponseBody$.inboundSchema = exports.UploadDatasetImageResponseBody$inboundSchema;
    /** @deprecated use `UploadDatasetImageResponseBody$outboundSchema` instead. */
    UploadDatasetImageResponseBody$.outboundSchema = exports.UploadDatasetImageResponseBody$outboundSchema;
})(UploadDatasetImageResponseBody$ || (exports.UploadDatasetImageResponseBody$ = UploadDatasetImageResponseBody$ = {}));
function uploadDatasetImageResponseBodyToJSON(uploadDatasetImageResponseBody) {
    return JSON.stringify(exports.UploadDatasetImageResponseBody$outboundSchema.parse(uploadDatasetImageResponseBody));
}
exports.uploadDatasetImageResponseBodyToJSON = uploadDatasetImageResponseBodyToJSON;
function uploadDatasetImageResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadDatasetImageResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadDatasetImageResponseBody' from JSON`);
}
exports.uploadDatasetImageResponseBodyFromJSON = uploadDatasetImageResponseBodyFromJSON;
/** @internal */
exports.UploadDatasetImageResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.UploadDatasetImageResponseBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.UploadDatasetImageResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.UploadDatasetImageResponseBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadDatasetImageResponse$;
(function (UploadDatasetImageResponse$) {
    /** @deprecated use `UploadDatasetImageResponse$inboundSchema` instead. */
    UploadDatasetImageResponse$.inboundSchema = exports.UploadDatasetImageResponse$inboundSchema;
    /** @deprecated use `UploadDatasetImageResponse$outboundSchema` instead. */
    UploadDatasetImageResponse$.outboundSchema = exports.UploadDatasetImageResponse$outboundSchema;
})(UploadDatasetImageResponse$ || (exports.UploadDatasetImageResponse$ = UploadDatasetImageResponse$ = {}));
function uploadDatasetImageResponseToJSON(uploadDatasetImageResponse) {
    return JSON.stringify(exports.UploadDatasetImageResponse$outboundSchema.parse(uploadDatasetImageResponse));
}
exports.uploadDatasetImageResponseToJSON = uploadDatasetImageResponseToJSON;
function uploadDatasetImageResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadDatasetImageResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadDatasetImageResponse' from JSON`);
}
exports.uploadDatasetImageResponseFromJSON = uploadDatasetImageResponseFromJSON;
//# sourceMappingURL=uploaddatasetimage.js.map