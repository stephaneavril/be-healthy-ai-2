"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getElementByIdResponseFromJSON = exports.getElementByIdResponseToJSON = exports.GetElementByIdResponse$ = exports.GetElementByIdResponse$outboundSchema = exports.GetElementByIdResponse$inboundSchema = exports.getElementByIdResponseBodyFromJSON = exports.getElementByIdResponseBodyToJSON = exports.GetElementByIdResponseBody$ = exports.GetElementByIdResponseBody$outboundSchema = exports.GetElementByIdResponseBody$inboundSchema = exports.getElementByIdUserLorasFromJSON = exports.getElementByIdUserLorasToJSON = exports.GetElementByIdUserLoras$ = exports.GetElementByIdUserLoras$outboundSchema = exports.GetElementByIdUserLoras$inboundSchema = exports.getElementByIdRequestFromJSON = exports.getElementByIdRequestToJSON = exports.GetElementByIdRequest$ = exports.GetElementByIdRequest$outboundSchema = exports.GetElementByIdRequest$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/** @internal */
exports.GetElementByIdRequest$inboundSchema = z.object({
    id: z.number().int(),
});
/** @internal */
exports.GetElementByIdRequest$outboundSchema = z.object({
    id: z.number().int(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetElementByIdRequest$;
(function (GetElementByIdRequest$) {
    /** @deprecated use `GetElementByIdRequest$inboundSchema` instead. */
    GetElementByIdRequest$.inboundSchema = exports.GetElementByIdRequest$inboundSchema;
    /** @deprecated use `GetElementByIdRequest$outboundSchema` instead. */
    GetElementByIdRequest$.outboundSchema = exports.GetElementByIdRequest$outboundSchema;
})(GetElementByIdRequest$ || (exports.GetElementByIdRequest$ = GetElementByIdRequest$ = {}));
function getElementByIdRequestToJSON(getElementByIdRequest) {
    return JSON.stringify(exports.GetElementByIdRequest$outboundSchema.parse(getElementByIdRequest));
}
exports.getElementByIdRequestToJSON = getElementByIdRequestToJSON;
function getElementByIdRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetElementByIdRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetElementByIdRequest' from JSON`);
}
exports.getElementByIdRequestFromJSON = getElementByIdRequestFromJSON;
/** @internal */
exports.GetElementByIdUserLoras$inboundSchema = z.object({
    baseModel: z.string().optional(),
    createdAt: z.string().optional(),
    description: z.string().optional(),
    focus: z.string().optional(),
    id: z.number().int().optional(),
    instancePrompt: z.nullable(z.string()).optional(),
    learningRate: z.number().optional(),
    name: z.string().optional(),
    resolution: z.number().int().optional(),
    status: shared.JobStatus$inboundSchema.optional(),
    trainTextEncoder: z.boolean().optional(),
    trainingEpoch: z.number().int().optional(),
    updatedAt: z.string().optional(),
});
/** @internal */
exports.GetElementByIdUserLoras$outboundSchema = z.object({
    baseModel: z.string().optional(),
    createdAt: z.string().optional(),
    description: z.string().optional(),
    focus: z.string().optional(),
    id: z.number().int().optional(),
    instancePrompt: z.nullable(z.string()).optional(),
    learningRate: z.number().optional(),
    name: z.string().optional(),
    resolution: z.number().int().optional(),
    status: shared.JobStatus$outboundSchema.optional(),
    trainTextEncoder: z.boolean().optional(),
    trainingEpoch: z.number().int().optional(),
    updatedAt: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetElementByIdUserLoras$;
(function (GetElementByIdUserLoras$) {
    /** @deprecated use `GetElementByIdUserLoras$inboundSchema` instead. */
    GetElementByIdUserLoras$.inboundSchema = exports.GetElementByIdUserLoras$inboundSchema;
    /** @deprecated use `GetElementByIdUserLoras$outboundSchema` instead. */
    GetElementByIdUserLoras$.outboundSchema = exports.GetElementByIdUserLoras$outboundSchema;
})(GetElementByIdUserLoras$ || (exports.GetElementByIdUserLoras$ = GetElementByIdUserLoras$ = {}));
function getElementByIdUserLorasToJSON(getElementByIdUserLoras) {
    return JSON.stringify(exports.GetElementByIdUserLoras$outboundSchema.parse(getElementByIdUserLoras));
}
exports.getElementByIdUserLorasToJSON = getElementByIdUserLorasToJSON;
function getElementByIdUserLorasFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetElementByIdUserLoras$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetElementByIdUserLoras' from JSON`);
}
exports.getElementByIdUserLorasFromJSON = getElementByIdUserLorasFromJSON;
/** @internal */
exports.GetElementByIdResponseBody$inboundSchema = z.object({
    user_loras_by_pk: z.nullable(z.lazy(() => exports.GetElementByIdUserLoras$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "user_loras_by_pk": "userLorasByPk",
    });
});
/** @internal */
exports.GetElementByIdResponseBody$outboundSchema = z.object({
    userLorasByPk: z.nullable(z.lazy(() => exports.GetElementByIdUserLoras$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        userLorasByPk: "user_loras_by_pk",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetElementByIdResponseBody$;
(function (GetElementByIdResponseBody$) {
    /** @deprecated use `GetElementByIdResponseBody$inboundSchema` instead. */
    GetElementByIdResponseBody$.inboundSchema = exports.GetElementByIdResponseBody$inboundSchema;
    /** @deprecated use `GetElementByIdResponseBody$outboundSchema` instead. */
    GetElementByIdResponseBody$.outboundSchema = exports.GetElementByIdResponseBody$outboundSchema;
})(GetElementByIdResponseBody$ || (exports.GetElementByIdResponseBody$ = GetElementByIdResponseBody$ = {}));
function getElementByIdResponseBodyToJSON(getElementByIdResponseBody) {
    return JSON.stringify(exports.GetElementByIdResponseBody$outboundSchema.parse(getElementByIdResponseBody));
}
exports.getElementByIdResponseBodyToJSON = getElementByIdResponseBodyToJSON;
function getElementByIdResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetElementByIdResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetElementByIdResponseBody' from JSON`);
}
exports.getElementByIdResponseBodyFromJSON = getElementByIdResponseBodyFromJSON;
/** @internal */
exports.GetElementByIdResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.GetElementByIdResponseBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.GetElementByIdResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.GetElementByIdResponseBody$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetElementByIdResponse$;
(function (GetElementByIdResponse$) {
    /** @deprecated use `GetElementByIdResponse$inboundSchema` instead. */
    GetElementByIdResponse$.inboundSchema = exports.GetElementByIdResponse$inboundSchema;
    /** @deprecated use `GetElementByIdResponse$outboundSchema` instead. */
    GetElementByIdResponse$.outboundSchema = exports.GetElementByIdResponse$outboundSchema;
})(GetElementByIdResponse$ || (exports.GetElementByIdResponse$ = GetElementByIdResponse$ = {}));
function getElementByIdResponseToJSON(getElementByIdResponse) {
    return JSON.stringify(exports.GetElementByIdResponse$outboundSchema.parse(getElementByIdResponse));
}
exports.getElementByIdResponseToJSON = getElementByIdResponseToJSON;
function getElementByIdResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetElementByIdResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetElementByIdResponse' from JSON`);
}
exports.getElementByIdResponseFromJSON = getElementByIdResponseFromJSON;
//# sourceMappingURL=getelementbyid.js.map