"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModelByIdResponseFromJSON = exports.getModelByIdResponseToJSON = exports.GetModelByIdResponse$ = exports.GetModelByIdResponse$outboundSchema = exports.GetModelByIdResponse$inboundSchema = exports.getModelByIdResponseBodyFromJSON = exports.getModelByIdResponseBodyToJSON = exports.GetModelByIdResponseBody$ = exports.GetModelByIdResponseBody$outboundSchema = exports.GetModelByIdResponseBody$inboundSchema = exports.getModelByIdCustomModelsFromJSON = exports.getModelByIdCustomModelsToJSON = exports.GetModelByIdCustomModels$ = exports.GetModelByIdCustomModels$outboundSchema = exports.GetModelByIdCustomModels$inboundSchema = exports.getModelByIdRequestFromJSON = exports.getModelByIdRequestToJSON = exports.GetModelByIdRequest$ = exports.GetModelByIdRequest$outboundSchema = exports.GetModelByIdRequest$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/** @internal */
exports.GetModelByIdRequest$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
exports.GetModelByIdRequest$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetModelByIdRequest$;
(function (GetModelByIdRequest$) {
    /** @deprecated use `GetModelByIdRequest$inboundSchema` instead. */
    GetModelByIdRequest$.inboundSchema = exports.GetModelByIdRequest$inboundSchema;
    /** @deprecated use `GetModelByIdRequest$outboundSchema` instead. */
    GetModelByIdRequest$.outboundSchema = exports.GetModelByIdRequest$outboundSchema;
})(GetModelByIdRequest$ || (exports.GetModelByIdRequest$ = GetModelByIdRequest$ = {}));
function getModelByIdRequestToJSON(getModelByIdRequest) {
    return JSON.stringify(exports.GetModelByIdRequest$outboundSchema.parse(getModelByIdRequest));
}
exports.getModelByIdRequestToJSON = getModelByIdRequestToJSON;
function getModelByIdRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetModelByIdRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetModelByIdRequest' from JSON`);
}
exports.getModelByIdRequestFromJSON = getModelByIdRequestFromJSON;
/** @internal */
exports.GetModelByIdCustomModels$inboundSchema = z.object({
    createdAt: z.string().optional(),
    description: z.string().optional(),
    id: z.nullable(z.string()).optional(),
    instancePrompt: z.nullable(z.string()).optional(),
    modelHeight: z.number().int().optional(),
    modelWidth: z.number().int().optional(),
    name: z.string().optional(),
    public: z.boolean().optional(),
    sdVersion: shared.SdVersions$inboundSchema.optional(),
    status: shared.JobStatus$inboundSchema.optional(),
    type: shared.CustomModelType$inboundSchema.default(shared.CustomModelType.General),
    updatedAt: z.string().optional(),
});
/** @internal */
exports.GetModelByIdCustomModels$outboundSchema = z.object({
    createdAt: z.string().optional(),
    description: z.string().optional(),
    id: z.nullable(z.string()).optional(),
    instancePrompt: z.nullable(z.string()).optional(),
    modelHeight: z.number().int().optional(),
    modelWidth: z.number().int().optional(),
    name: z.string().optional(),
    public: z.boolean().optional(),
    sdVersion: shared.SdVersions$outboundSchema.optional(),
    status: shared.JobStatus$outboundSchema.optional(),
    type: shared.CustomModelType$outboundSchema.default(shared.CustomModelType.General),
    updatedAt: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetModelByIdCustomModels$;
(function (GetModelByIdCustomModels$) {
    /** @deprecated use `GetModelByIdCustomModels$inboundSchema` instead. */
    GetModelByIdCustomModels$.inboundSchema = exports.GetModelByIdCustomModels$inboundSchema;
    /** @deprecated use `GetModelByIdCustomModels$outboundSchema` instead. */
    GetModelByIdCustomModels$.outboundSchema = exports.GetModelByIdCustomModels$outboundSchema;
})(GetModelByIdCustomModels$ || (exports.GetModelByIdCustomModels$ = GetModelByIdCustomModels$ = {}));
function getModelByIdCustomModelsToJSON(getModelByIdCustomModels) {
    return JSON.stringify(exports.GetModelByIdCustomModels$outboundSchema.parse(getModelByIdCustomModels));
}
exports.getModelByIdCustomModelsToJSON = getModelByIdCustomModelsToJSON;
function getModelByIdCustomModelsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetModelByIdCustomModels$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetModelByIdCustomModels' from JSON`);
}
exports.getModelByIdCustomModelsFromJSON = getModelByIdCustomModelsFromJSON;
/** @internal */
exports.GetModelByIdResponseBody$inboundSchema = z.object({
    custom_models_by_pk: z.nullable(z.lazy(() => exports.GetModelByIdCustomModels$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "custom_models_by_pk": "customModelsByPk",
    });
});
/** @internal */
exports.GetModelByIdResponseBody$outboundSchema = z.object({
    customModelsByPk: z.nullable(z.lazy(() => exports.GetModelByIdCustomModels$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        customModelsByPk: "custom_models_by_pk",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetModelByIdResponseBody$;
(function (GetModelByIdResponseBody$) {
    /** @deprecated use `GetModelByIdResponseBody$inboundSchema` instead. */
    GetModelByIdResponseBody$.inboundSchema = exports.GetModelByIdResponseBody$inboundSchema;
    /** @deprecated use `GetModelByIdResponseBody$outboundSchema` instead. */
    GetModelByIdResponseBody$.outboundSchema = exports.GetModelByIdResponseBody$outboundSchema;
})(GetModelByIdResponseBody$ || (exports.GetModelByIdResponseBody$ = GetModelByIdResponseBody$ = {}));
function getModelByIdResponseBodyToJSON(getModelByIdResponseBody) {
    return JSON.stringify(exports.GetModelByIdResponseBody$outboundSchema.parse(getModelByIdResponseBody));
}
exports.getModelByIdResponseBodyToJSON = getModelByIdResponseBodyToJSON;
function getModelByIdResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetModelByIdResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetModelByIdResponseBody' from JSON`);
}
exports.getModelByIdResponseBodyFromJSON = getModelByIdResponseBodyFromJSON;
/** @internal */
exports.GetModelByIdResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.GetModelByIdResponseBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.GetModelByIdResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.GetModelByIdResponseBody$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetModelByIdResponse$;
(function (GetModelByIdResponse$) {
    /** @deprecated use `GetModelByIdResponse$inboundSchema` instead. */
    GetModelByIdResponse$.inboundSchema = exports.GetModelByIdResponse$inboundSchema;
    /** @deprecated use `GetModelByIdResponse$outboundSchema` instead. */
    GetModelByIdResponse$.outboundSchema = exports.GetModelByIdResponse$outboundSchema;
})(GetModelByIdResponse$ || (exports.GetModelByIdResponse$ = GetModelByIdResponse$ = {}));
function getModelByIdResponseToJSON(getModelByIdResponse) {
    return JSON.stringify(exports.GetModelByIdResponse$outboundSchema.parse(getModelByIdResponse));
}
exports.getModelByIdResponseToJSON = getModelByIdResponseToJSON;
function getModelByIdResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetModelByIdResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetModelByIdResponse' from JSON`);
}
exports.getModelByIdResponseFromJSON = getModelByIdResponseFromJSON;
//# sourceMappingURL=getmodelbyid.js.map