"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGenerationResponseFromJSON = exports.createGenerationResponseToJSON = exports.CreateGenerationResponse$ = exports.CreateGenerationResponse$outboundSchema = exports.CreateGenerationResponse$inboundSchema = exports.createGenerationResponseBodyFromJSON = exports.createGenerationResponseBodyToJSON = exports.CreateGenerationResponseBody$ = exports.CreateGenerationResponseBody$outboundSchema = exports.CreateGenerationResponseBody$inboundSchema = exports.sdGenerationOutputFromJSON = exports.sdGenerationOutputToJSON = exports.SDGenerationOutput$ = exports.SDGenerationOutput$outboundSchema = exports.SDGenerationOutput$inboundSchema = exports.createGenerationRequestBodyFromJSON = exports.createGenerationRequestBodyToJSON = exports.CreateGenerationRequestBody$ = exports.CreateGenerationRequestBody$outboundSchema = exports.CreateGenerationRequestBody$inboundSchema = exports.TransparencyType$ = exports.TransparencyType$outboundSchema = exports.TransparencyType$inboundSchema = exports.TransparencyType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/**
 * Which type of transparency this image should use
 */
var TransparencyType;
(function (TransparencyType) {
    TransparencyType["Disabled"] = "disabled";
    TransparencyType["ForegroundOnly"] = "foreground_only";
})(TransparencyType || (exports.TransparencyType = TransparencyType = {}));
/** @internal */
exports.TransparencyType$inboundSchema = z.nativeEnum(TransparencyType);
/** @internal */
exports.TransparencyType$outboundSchema = exports.TransparencyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransparencyType$;
(function (TransparencyType$) {
    /** @deprecated use `TransparencyType$inboundSchema` instead. */
    TransparencyType$.inboundSchema = exports.TransparencyType$inboundSchema;
    /** @deprecated use `TransparencyType$outboundSchema` instead. */
    TransparencyType$.outboundSchema = exports.TransparencyType$outboundSchema;
})(TransparencyType$ || (exports.TransparencyType$ = TransparencyType$ = {}));
/** @internal */
exports.CreateGenerationRequestBody$inboundSchema = z.object({
    alchemy: z.nullable(z.boolean().default(true)),
    canvasInitId: z.nullable(z.string()).optional(),
    canvasMaskId: z.nullable(z.string()).optional(),
    canvasRequest: z.nullable(z.boolean()).optional(),
    canvasRequestType: z.nullable(shared.CanvasRequestType$inboundSchema)
        .optional(),
    contrastRatio: z.nullable(z.number()).optional(),
    controlNet: z.nullable(z.boolean()).optional(),
    controlNetType: shared.ControlnetType$inboundSchema.optional(),
    controlnets: z.nullable(z.array(shared.ControlnetInput$inboundSchema))
        .optional(),
    elements: z.nullable(z.array(shared.ElementInput$inboundSchema)).optional(),
    enhancePrompt: z.nullable(z.boolean()).optional(),
    enhancePromptInstruction: z.nullable(z.string()).optional(),
    expandedDomain: z.nullable(z.boolean()).optional(),
    fantasyAvatar: z.nullable(z.boolean()).optional(),
    guidance_scale: z.nullable(z.number().int()).optional(),
    height: z.nullable(z.number().int().default(768)),
    highContrast: z.nullable(z.boolean()).optional(),
    highResolution: z.nullable(z.boolean()).optional(),
    imagePromptWeight: z.nullable(z.number()).optional(),
    imagePrompts: z.nullable(z.array(z.string())).optional(),
    init_generation_image_id: z.nullable(z.string()).optional(),
    init_image_id: z.nullable(z.string()).optional(),
    init_strength: z.nullable(z.number()).optional(),
    modelId: z.nullable(z.string().default("b24e16ff-06e3-43eb-8d33-4416c2d75876")),
    negative_prompt: z.nullable(z.string()).optional(),
    num_images: z.nullable(z.number().int().default(4)),
    num_inference_steps: z.nullable(z.number().int()).optional(),
    photoReal: z.nullable(z.boolean()).optional(),
    photoRealStrength: z.nullable(z.number()).optional(),
    photoRealVersion: z.nullable(z.string()).optional(),
    presetStyle: z.nullable(shared.SdGenerationStyle$inboundSchema.default(shared.SdGenerationStyle.Dynamic)),
    prompt: z.string().default("A majestic cat in the snow"),
    promptMagic: z.nullable(z.boolean()).optional(),
    promptMagicStrength: z.nullable(z.number()).optional(),
    promptMagicVersion: z.nullable(z.string()).optional(),
    public: z.nullable(z.boolean()).optional(),
    scheduler: shared.SdGenerationSchedulers$inboundSchema.optional(),
    sd_version: shared.SdVersions$inboundSchema.optional(),
    seed: z.nullable(z.number().int()).optional(),
    tiling: z.nullable(z.boolean()).optional(),
    transparency: z.nullable(exports.TransparencyType$inboundSchema).optional(),
    ultra: z.nullable(z.boolean()).optional(),
    unzoom: z.nullable(z.boolean()).optional(),
    unzoomAmount: z.nullable(z.number()).optional(),
    upscaleRatio: z.nullable(z.number()).optional(),
    userElements: z.nullable(z.array(shared.UserElementsInput$inboundSchema))
        .optional(),
    weighting: z.nullable(z.number()).optional(),
    width: z.nullable(z.number().int().default(1024)),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "guidance_scale": "guidanceScale",
        "init_generation_image_id": "initGenerationImageId",
        "init_image_id": "initImageId",
        "init_strength": "initStrength",
        "negative_prompt": "negativePrompt",
        "num_images": "numImages",
        "num_inference_steps": "numInferenceSteps",
        "sd_version": "sdVersion",
    });
});
/** @internal */
exports.CreateGenerationRequestBody$outboundSchema = z.object({
    alchemy: z.nullable(z.boolean().default(true)),
    canvasInitId: z.nullable(z.string()).optional(),
    canvasMaskId: z.nullable(z.string()).optional(),
    canvasRequest: z.nullable(z.boolean()).optional(),
    canvasRequestType: z.nullable(shared.CanvasRequestType$outboundSchema)
        .optional(),
    contrastRatio: z.nullable(z.number()).optional(),
    controlNet: z.nullable(z.boolean()).optional(),
    controlNetType: shared.ControlnetType$outboundSchema.optional(),
    controlnets: z.nullable(z.array(shared.ControlnetInput$outboundSchema))
        .optional(),
    elements: z.nullable(z.array(shared.ElementInput$outboundSchema)).optional(),
    enhancePrompt: z.nullable(z.boolean()).optional(),
    enhancePromptInstruction: z.nullable(z.string()).optional(),
    expandedDomain: z.nullable(z.boolean()).optional(),
    fantasyAvatar: z.nullable(z.boolean()).optional(),
    guidanceScale: z.nullable(z.number().int()).optional(),
    height: z.nullable(z.number().int().default(768)),
    highContrast: z.nullable(z.boolean()).optional(),
    highResolution: z.nullable(z.boolean()).optional(),
    imagePromptWeight: z.nullable(z.number()).optional(),
    imagePrompts: z.nullable(z.array(z.string())).optional(),
    initGenerationImageId: z.nullable(z.string()).optional(),
    initImageId: z.nullable(z.string()).optional(),
    initStrength: z.nullable(z.number()).optional(),
    modelId: z.nullable(z.string().default("b24e16ff-06e3-43eb-8d33-4416c2d75876")),
    negativePrompt: z.nullable(z.string()).optional(),
    numImages: z.nullable(z.number().int().default(4)),
    numInferenceSteps: z.nullable(z.number().int()).optional(),
    photoReal: z.nullable(z.boolean()).optional(),
    photoRealStrength: z.nullable(z.number()).optional(),
    photoRealVersion: z.nullable(z.string()).optional(),
    presetStyle: z.nullable(shared.SdGenerationStyle$outboundSchema.default(shared.SdGenerationStyle.Dynamic)),
    prompt: z.string().default("A majestic cat in the snow"),
    promptMagic: z.nullable(z.boolean()).optional(),
    promptMagicStrength: z.nullable(z.number()).optional(),
    promptMagicVersion: z.nullable(z.string()).optional(),
    public: z.nullable(z.boolean()).optional(),
    scheduler: shared.SdGenerationSchedulers$outboundSchema.optional(),
    sdVersion: shared.SdVersions$outboundSchema.optional(),
    seed: z.nullable(z.number().int()).optional(),
    tiling: z.nullable(z.boolean()).optional(),
    transparency: z.nullable(exports.TransparencyType$outboundSchema).optional(),
    ultra: z.nullable(z.boolean()).optional(),
    unzoom: z.nullable(z.boolean()).optional(),
    unzoomAmount: z.nullable(z.number()).optional(),
    upscaleRatio: z.nullable(z.number()).optional(),
    userElements: z.nullable(z.array(shared.UserElementsInput$outboundSchema))
        .optional(),
    weighting: z.nullable(z.number()).optional(),
    width: z.nullable(z.number().int().default(1024)),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        guidanceScale: "guidance_scale",
        initGenerationImageId: "init_generation_image_id",
        initImageId: "init_image_id",
        initStrength: "init_strength",
        negativePrompt: "negative_prompt",
        numImages: "num_images",
        numInferenceSteps: "num_inference_steps",
        sdVersion: "sd_version",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateGenerationRequestBody$;
(function (CreateGenerationRequestBody$) {
    /** @deprecated use `CreateGenerationRequestBody$inboundSchema` instead. */
    CreateGenerationRequestBody$.inboundSchema = exports.CreateGenerationRequestBody$inboundSchema;
    /** @deprecated use `CreateGenerationRequestBody$outboundSchema` instead. */
    CreateGenerationRequestBody$.outboundSchema = exports.CreateGenerationRequestBody$outboundSchema;
})(CreateGenerationRequestBody$ || (exports.CreateGenerationRequestBody$ = CreateGenerationRequestBody$ = {}));
function createGenerationRequestBodyToJSON(createGenerationRequestBody) {
    return JSON.stringify(exports.CreateGenerationRequestBody$outboundSchema.parse(createGenerationRequestBody));
}
exports.createGenerationRequestBodyToJSON = createGenerationRequestBodyToJSON;
function createGenerationRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateGenerationRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateGenerationRequestBody' from JSON`);
}
exports.createGenerationRequestBodyFromJSON = createGenerationRequestBodyFromJSON;
/** @internal */
exports.SDGenerationOutput$inboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    generationId: z.string().optional(),
});
/** @internal */
exports.SDGenerationOutput$outboundSchema = z.object({
    apiCreditCost: z.nullable(z.number().int()).optional(),
    generationId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SDGenerationOutput$;
(function (SDGenerationOutput$) {
    /** @deprecated use `SDGenerationOutput$inboundSchema` instead. */
    SDGenerationOutput$.inboundSchema = exports.SDGenerationOutput$inboundSchema;
    /** @deprecated use `SDGenerationOutput$outboundSchema` instead. */
    SDGenerationOutput$.outboundSchema = exports.SDGenerationOutput$outboundSchema;
})(SDGenerationOutput$ || (exports.SDGenerationOutput$ = SDGenerationOutput$ = {}));
function sdGenerationOutputToJSON(sdGenerationOutput) {
    return JSON.stringify(exports.SDGenerationOutput$outboundSchema.parse(sdGenerationOutput));
}
exports.sdGenerationOutputToJSON = sdGenerationOutputToJSON;
function sdGenerationOutputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SDGenerationOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SDGenerationOutput' from JSON`);
}
exports.sdGenerationOutputFromJSON = sdGenerationOutputFromJSON;
/** @internal */
exports.CreateGenerationResponseBody$inboundSchema = z.object({
    sdGenerationJob: z.nullable(z.lazy(() => exports.SDGenerationOutput$inboundSchema))
        .optional(),
});
/** @internal */
exports.CreateGenerationResponseBody$outboundSchema = z.object({
    sdGenerationJob: z.nullable(z.lazy(() => exports.SDGenerationOutput$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateGenerationResponseBody$;
(function (CreateGenerationResponseBody$) {
    /** @deprecated use `CreateGenerationResponseBody$inboundSchema` instead. */
    CreateGenerationResponseBody$.inboundSchema = exports.CreateGenerationResponseBody$inboundSchema;
    /** @deprecated use `CreateGenerationResponseBody$outboundSchema` instead. */
    CreateGenerationResponseBody$.outboundSchema = exports.CreateGenerationResponseBody$outboundSchema;
})(CreateGenerationResponseBody$ || (exports.CreateGenerationResponseBody$ = CreateGenerationResponseBody$ = {}));
function createGenerationResponseBodyToJSON(createGenerationResponseBody) {
    return JSON.stringify(exports.CreateGenerationResponseBody$outboundSchema.parse(createGenerationResponseBody));
}
exports.createGenerationResponseBodyToJSON = createGenerationResponseBodyToJSON;
function createGenerationResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateGenerationResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateGenerationResponseBody' from JSON`);
}
exports.createGenerationResponseBodyFromJSON = createGenerationResponseBodyFromJSON;
/** @internal */
exports.CreateGenerationResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() => exports.CreateGenerationResponseBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.CreateGenerationResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() => exports.CreateGenerationResponseBody$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateGenerationResponse$;
(function (CreateGenerationResponse$) {
    /** @deprecated use `CreateGenerationResponse$inboundSchema` instead. */
    CreateGenerationResponse$.inboundSchema = exports.CreateGenerationResponse$inboundSchema;
    /** @deprecated use `CreateGenerationResponse$outboundSchema` instead. */
    CreateGenerationResponse$.outboundSchema = exports.CreateGenerationResponse$outboundSchema;
})(CreateGenerationResponse$ || (exports.CreateGenerationResponse$ = CreateGenerationResponse$ = {}));
function createGenerationResponseToJSON(createGenerationResponse) {
    return JSON.stringify(exports.CreateGenerationResponse$outboundSchema.parse(createGenerationResponse));
}
exports.createGenerationResponseToJSON = createGenerationResponseToJSON;
function createGenerationResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateGenerationResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateGenerationResponse' from JSON`);
}
exports.createGenerationResponseFromJSON = createGenerationResponseFromJSON;
//# sourceMappingURL=creategeneration.js.map