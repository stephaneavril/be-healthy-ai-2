import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * The base version of stable diffusion to use if not using a custom model.
 */
export declare enum SdVersions {
    Sdxl09 = "SDXL_0_9",
    Sdxl10 = "SDXL_1_0",
    LeonardoDiffusionXl = "LEONARDO_DIFFUSION_XL",
    LeonardoLightningXl = "LEONARDO_LIGHTNING_XL",
    VisionXl = "VISION_XL",
    KinoXl = "KINO_XL",
    AlbedoXl = "ALBEDO_XL"
}
/**
 * Query parameters to be provided in the request body as a JSON object.
 */
export type CreateElementRequestBody = {
    /**
     * The ID of the dataset to train the element on.
     */
    datasetId?: string | undefined;
    /**
     * The description of the element.
     */
    description?: string | null | undefined;
    /**
     * The instance prompt to use during training.Try “a” by a noun. E.g. a castle
     */
    instancePrompt?: string | undefined;
    /**
     * The speed of element learns.
     */
    learningRate?: number | undefined;
    /**
     * The category determines how the element will be trained. Options are 'General' | 'Character' | 'Style' | 'Object'.
     */
    loraFocus?: string | undefined;
    /**
     * The name of the element.
     */
    name?: string | undefined;
    /**
     * The number of times the entire training dataset is passed through the element.
     */
    numTrainEpochs?: number | undefined;
    /**
     * The resolution for training. Must be 1024.
     */
    resolution?: number | null | undefined;
    /**
     * The base version of stable diffusion to use if not using a custom model.
     */
    sdVersion?: SdVersions | undefined;
    /**
     * Whether or not encode the train text.
     */
    trainTextEncoder?: boolean | undefined;
};
export type SDTrainingOutput = {
    /**
     * API Credits Cost for Model Training. Available for Production API Users.
     */
    apiCreditCost?: number | null | undefined;
    userLoraId?: number | undefined;
};
/**
 * Responses for POST /elements.
 */
export type CreateElementResponseBody = {
    sdTrainingJob?: SDTrainingOutput | null | undefined;
};
export type CreateElementResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /elements.
     */
    object?: CreateElementResponseBody | undefined;
};
/** @internal */
export declare const SdVersions$inboundSchema: z.ZodNativeEnum<typeof SdVersions>;
/** @internal */
export declare const SdVersions$outboundSchema: z.ZodNativeEnum<typeof SdVersions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SdVersions$ {
    /** @deprecated use `SdVersions$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof SdVersions>;
    /** @deprecated use `SdVersions$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof SdVersions>;
}
/** @internal */
export declare const CreateElementRequestBody$inboundSchema: z.ZodType<CreateElementRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateElementRequestBody$Outbound = {
    datasetId: string;
    description: string | null;
    instance_prompt: string;
    learning_rate: number;
    lora_focus: string;
    name: string;
    num_train_epochs: number;
    resolution: number | null;
    sd_version: string;
    train_text_encoder: boolean;
};
/** @internal */
export declare const CreateElementRequestBody$outboundSchema: z.ZodType<CreateElementRequestBody$Outbound, z.ZodTypeDef, CreateElementRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateElementRequestBody$ {
    /** @deprecated use `CreateElementRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateElementRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateElementRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateElementRequestBody$Outbound, z.ZodTypeDef, CreateElementRequestBody>;
    /** @deprecated use `CreateElementRequestBody$Outbound` instead. */
    type Outbound = CreateElementRequestBody$Outbound;
}
export declare function createElementRequestBodyToJSON(createElementRequestBody: CreateElementRequestBody): string;
export declare function createElementRequestBodyFromJSON(jsonString: string): SafeParseResult<CreateElementRequestBody, SDKValidationError>;
/** @internal */
export declare const SDTrainingOutput$inboundSchema: z.ZodType<SDTrainingOutput, z.ZodTypeDef, unknown>;
/** @internal */
export type SDTrainingOutput$Outbound = {
    apiCreditCost?: number | null | undefined;
    userLoraId?: number | undefined;
};
/** @internal */
export declare const SDTrainingOutput$outboundSchema: z.ZodType<SDTrainingOutput$Outbound, z.ZodTypeDef, SDTrainingOutput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SDTrainingOutput$ {
    /** @deprecated use `SDTrainingOutput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SDTrainingOutput, z.ZodTypeDef, unknown>;
    /** @deprecated use `SDTrainingOutput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SDTrainingOutput$Outbound, z.ZodTypeDef, SDTrainingOutput>;
    /** @deprecated use `SDTrainingOutput$Outbound` instead. */
    type Outbound = SDTrainingOutput$Outbound;
}
export declare function sdTrainingOutputToJSON(sdTrainingOutput: SDTrainingOutput): string;
export declare function sdTrainingOutputFromJSON(jsonString: string): SafeParseResult<SDTrainingOutput, SDKValidationError>;
/** @internal */
export declare const CreateElementResponseBody$inboundSchema: z.ZodType<CreateElementResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateElementResponseBody$Outbound = {
    sdTrainingJob?: SDTrainingOutput$Outbound | null | undefined;
};
/** @internal */
export declare const CreateElementResponseBody$outboundSchema: z.ZodType<CreateElementResponseBody$Outbound, z.ZodTypeDef, CreateElementResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateElementResponseBody$ {
    /** @deprecated use `CreateElementResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateElementResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateElementResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateElementResponseBody$Outbound, z.ZodTypeDef, CreateElementResponseBody>;
    /** @deprecated use `CreateElementResponseBody$Outbound` instead. */
    type Outbound = CreateElementResponseBody$Outbound;
}
export declare function createElementResponseBodyToJSON(createElementResponseBody: CreateElementResponseBody): string;
export declare function createElementResponseBodyFromJSON(jsonString: string): SafeParseResult<CreateElementResponseBody, SDKValidationError>;
/** @internal */
export declare const CreateElementResponse$inboundSchema: z.ZodType<CreateElementResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateElementResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    object?: CreateElementResponseBody$Outbound | undefined;
};
/** @internal */
export declare const CreateElementResponse$outboundSchema: z.ZodType<CreateElementResponse$Outbound, z.ZodTypeDef, CreateElementResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateElementResponse$ {
    /** @deprecated use `CreateElementResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateElementResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateElementResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateElementResponse$Outbound, z.ZodTypeDef, CreateElementResponse>;
    /** @deprecated use `CreateElementResponse$Outbound` instead. */
    type Outbound = CreateElementResponse$Outbound;
}
export declare function createElementResponseToJSON(createElementResponse: CreateElementResponse): string;
export declare function createElementResponseFromJSON(jsonString: string): SafeParseResult<CreateElementResponse, SDKValidationError>;
//# sourceMappingURL=createelement.d.ts.map