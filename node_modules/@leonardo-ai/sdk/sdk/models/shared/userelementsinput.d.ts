import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type UserElementsInput = {
    /**
     * Unique identifier for user custom element.
     */
    userLoraId?: number | null | undefined;
    /**
     * Weight for the element
     */
    weight?: number | null | undefined;
};
/** @internal */
export declare const UserElementsInput$inboundSchema: z.ZodType<UserElementsInput, z.ZodTypeDef, unknown>;
/** @internal */
export type UserElementsInput$Outbound = {
    userLoraId?: number | null | undefined;
    weight?: number | null | undefined;
};
/** @internal */
export declare const UserElementsInput$outboundSchema: z.ZodType<UserElementsInput$Outbound, z.ZodTypeDef, UserElementsInput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserElementsInput$ {
    /** @deprecated use `UserElementsInput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserElementsInput, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserElementsInput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserElementsInput$Outbound, z.ZodTypeDef, UserElementsInput>;
    /** @deprecated use `UserElementsInput$Outbound` instead. */
    type Outbound = UserElementsInput$Outbound;
}
export declare function userElementsInputToJSON(userElementsInput: UserElementsInput): string;
export declare function userElementsInputFromJSON(jsonString: string): SafeParseResult<UserElementsInput, SDKValidationError>;
//# sourceMappingURL=userelementsinput.d.ts.map