import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type ElementInput = {
    /**
     * Unique identifier for element. Elements can be found from the List Elements endpoint.
     */
    akUUID?: string | null | undefined;
    /**
     * Weight for the element
     */
    weight?: number | null | undefined;
};
/** @internal */
export declare const ElementInput$inboundSchema: z.ZodType<ElementInput, z.ZodTypeDef, unknown>;
/** @internal */
export type ElementInput$Outbound = {
    akUUID?: string | null | undefined;
    weight?: number | null | undefined;
};
/** @internal */
export declare const ElementInput$outboundSchema: z.ZodType<ElementInput$Outbound, z.ZodTypeDef, ElementInput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ElementInput$ {
    /** @deprecated use `ElementInput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ElementInput, z.ZodTypeDef, unknown>;
    /** @deprecated use `ElementInput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ElementInput$Outbound, z.ZodTypeDef, ElementInput>;
    /** @deprecated use `ElementInput$Outbound` instead. */
    type Outbound = ElementInput$Outbound;
}
export declare function elementInputToJSON(elementInput: ElementInput): string;
export declare function elementInputFromJSON(jsonString: string): SafeParseResult<ElementInput, SDKValidationError>;
//# sourceMappingURL=elementinput.d.ts.map