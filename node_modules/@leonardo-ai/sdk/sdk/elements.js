"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Elements = void 0;
const elementsCreateElement_js_1 = require("../funcs/elementsCreateElement.js");
const elementsDeleteElementById_js_1 = require("../funcs/elementsDeleteElementById.js");
const elementsGetCustomElementsByUserId_js_1 = require("../funcs/elementsGetCustomElementsByUserId.js");
const elementsGetElementById_js_1 = require("../funcs/elementsGetElementById.js");
const elementsListElements_js_1 = require("../funcs/elementsListElements.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("./types/fp.js");
class Elements extends sdks_js_1.ClientSDK {
    /**
     * Train a Custom Element
     *
     * @remarks
     * This endpoint will train a new custom element.
     */
    async createElement(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, elementsCreateElement_js_1.elementsCreateElement)(this, request, options));
    }
    /**
     * Delete a Single Custom Element by ID
     *
     * @remarks
     * This endpoint will delete a specific custom model.
     */
    async deleteElementById(id, options) {
        return (0, fp_js_1.unwrapAsync)((0, elementsDeleteElementById_js_1.elementsDeleteElementById)(this, id, options));
    }
    /**
     * Get a list of Custom Elements by User ID
     *
     * @remarks
     * This endpoint gets the list of custom elements belongs to the user.
     */
    async getCustomElementsByUserId(userId, options) {
        return (0, fp_js_1.unwrapAsync)((0, elementsGetCustomElementsByUserId_js_1.elementsGetCustomElementsByUserId)(this, userId, options));
    }
    /**
     * Get a Single Custom Element by ID
     *
     * @remarks
     * This endpoint gets the specific custom element.
     */
    async getElementById(id, options) {
        return (0, fp_js_1.unwrapAsync)((0, elementsGetElementById_js_1.elementsGetElementById)(this, id, options));
    }
    /**
     * List Elements
     *
     * @remarks
     * Get a list of public Elements available for use with generations.
     */
    async listElements(options) {
        return (0, fp_js_1.unwrapAsync)((0, elementsListElements_js_1.elementsListElements)(this, options));
    }
}
exports.Elements = Elements;
//# sourceMappingURL=elements.js.map