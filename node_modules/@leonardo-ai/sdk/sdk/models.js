"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Models = void 0;
const modelsCreateModel_js_1 = require("../funcs/modelsCreateModel.js");
const modelsDeleteModelById_js_1 = require("../funcs/modelsDeleteModelById.js");
const modelsGetCustomModelsByUserId_js_1 = require("../funcs/modelsGetCustomModelsByUserId.js");
const modelsGetModelById_js_1 = require("../funcs/modelsGetModelById.js");
const modelsListPlatformModels_js_1 = require("../funcs/modelsListPlatformModels.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("./types/fp.js");
class Models extends sdks_js_1.ClientSDK {
    /**
     * Train a Custom Model
     *
     * @remarks
     * This endpoint will train a new custom model
     */
    async createModel(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsCreateModel_js_1.modelsCreateModel)(this, request, options));
    }
    /**
     * Delete a Single Custom Model by ID
     *
     * @remarks
     * This endpoint will delete a specific custom model
     */
    async deleteModelById(id, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsDeleteModelById_js_1.modelsDeleteModelById)(this, id, options));
    }
    /**
     * Get a list of Custom Models by User ID
     *
     * @remarks
     * This endpoint gets the list of custom models belongs to the user.
     */
    async getCustomModelsByUserId(userId, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsGetCustomModelsByUserId_js_1.modelsGetCustomModelsByUserId)(this, userId, options));
    }
    /**
     * Get a Single Custom Model by ID
     *
     * @remarks
     * This endpoint gets the specific custom model
     */
    async getModelById(id, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsGetModelById_js_1.modelsGetModelById)(this, id, options));
    }
    /**
     * List Platform Models
     *
     * @remarks
     * Get a list of public Platform Models available for use with generations.
     */
    async listPlatformModels(options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsListPlatformModels_js_1.modelsListPlatformModels)(this, options));
    }
}
exports.Models = Models;
//# sourceMappingURL=models.js.map